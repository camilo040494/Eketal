/**
 * generated by Xtext 2.9.2
 */
package co.edu.icesi.eketal.jvmmodel;

import co.edu.icesi.eketal.eketal.Automaton;
import co.edu.icesi.eketal.eketal.Decl;
import co.edu.icesi.eketal.eketal.EvDecl;
import co.edu.icesi.eketal.eketal.EventClass;
import co.edu.icesi.eketal.eketal.Group;
import co.edu.icesi.eketal.eketal.Model;
import co.edu.icesi.eketal.eketal.StateType;
import co.edu.icesi.eketal.eketal.Step;
import co.edu.icesi.eketal.eketal.TransDef;
import co.edu.icesi.eketal.outputconfiguration.OutputConfigurationAdapter;
import co.edu.icesi.ketal.core.DefaultEqualsExpression;
import co.edu.icesi.ketal.core.Event;
import co.edu.icesi.ketal.core.Expression;
import co.edu.icesi.ketal.core.NamedEvent;
import co.edu.icesi.ketal.core.State;
import co.edu.icesi.ketal.core.Transition;
import co.edu.icesi.ketal.distribution.BrokerMessageHandler;
import co.edu.icesi.ketal.distribution.EventBroker;
import co.edu.icesi.ketal.distribution.KetalMessageHandler;
import co.edu.icesi.ketal.distribution.ReceiverMessageHandler;
import co.edu.icesi.ketal.distribution.transports.jgroups.JGroupsEventBroker;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class EketalJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public static String groupClassName = "GroupsControl";
  
  public static String handlerClassName = "EventHandler";
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Model element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(element);
    final JvmGenericType implementation = this._jvmTypesBuilder.toClass(element, _fullyQualifiedName);
    boolean _equals = Objects.equal(implementation, null);
    if (_equals) {
      return;
    }
    EventClass eventClass = element.getTypeDeclaration();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(eventClass);
    JvmGenericType eventClassGenerate = this._jvmTypesBuilder.toClass(eventClass, _fullyQualifiedName_1);
    EList<Adapter> _eAdapters = eventClassGenerate.eAdapters();
    OutputConfigurationAdapter _outputConfigurationAdapter = new OutputConfigurationAdapter(IFileSystemAccess.DEFAULT_OUTPUT);
    _eAdapters.add(_outputConfigurationAdapter);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      InputOutput.<String>println("l√≠nea 97 Inferrer");
    };
    acceptor.<JvmGenericType>accept(eventClassGenerate, _function);
    final EventClass handlerClass = element.getTypeDeclaration();
    this.createHandlerClass(acceptor, handlerClass);
    final EventClass groupsClass = element.getTypeDeclaration();
    this.createGroupClass(acceptor, groupsClass);
    EventClass _typeDeclaration = element.getTypeDeclaration();
    EList<Decl> declarations = _typeDeclaration.getDeclarations();
    for (final Decl declaracion : declarations) {
      boolean _matched = false;
      if (declaracion instanceof Automaton) {
        _matched=true;
        String _name = ((Automaton)declaracion).getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name);
        String _plus = ("co.edu.icesi.eketal.automaton." + _firstUpper);
        JvmGenericType _class = this._jvmTypesBuilder.toClass(declaracion, _plus);
        final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
          EList<JvmMember> _members = it.getMembers();
          JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
          final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
            it_1.setStatic(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(declaracion, "instance", _typeRef, _function_2);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
          EList<JvmMember> _members_1 = it.getMembers();
          JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
          final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("if(instance==null)");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("new ");
                String _name = ((Automaton)declaracion).getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name);
                _builder.append(_firstUpper, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("return instance;");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(declaracion, "getInstance", _typeRef_1, _function_3);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
          EList<JvmMember> _members_2 = it.getMembers();
          final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
            it_1.setVisibility(JvmVisibility.PRIVATE);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("initialize();");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(declaracion, _function_4);
          this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_2, _constructor);
          EList<JvmMember> _members_3 = it.getMembers();
          JvmOperation _AutomatonInit = this.AutomatonInit(((Automaton) declaracion));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _AutomatonInit);
        };
        acceptor.<JvmGenericType>accept(_class, _function_1);
      }
    }
  }
  
  /**
   * Also adds the Singleton nature
   */
  public void createHandlerClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass eventDefinitionClass) {
    JvmGenericType _class = this._jvmTypesBuilder.toClass(eventDefinitionClass, ("co.edu.icesi.eketal.handlercontrol." + EketalJvmModelInferrer.handlerClassName));
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(it);
      final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "");
            _builder.append("()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(eventDefinitionClass, "instance", _typeRef, _function_1);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(BrokerMessageHandler.class);
      final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(eventDefinitionClass, "brokerMessageHandler", _typeRef_1, _function_2);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      JvmTypeReference _typeRef_2 = this._typeReferenceBuilder.typeRef(EventBroker.class);
      final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_2 = this._jvmTypesBuilder.toField(eventDefinitionClass, "eventBroker", _typeRef_2, _function_3);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
        it_1.setVisibility(JvmVisibility.PRIVATE);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("brokerMessageHandler = new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef, "");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("eventBroker = new ");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(JGroupsEventBroker.class);
            _builder.append(_typeRef_1, "");
            _builder.append("(\"Eketal\", brokerMessageHandler);");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(eventDefinitionClass, _function_4);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
      EList<JvmMember> _members_4 = it.getMembers();
      JvmTypeReference _typeRef_3 = this._typeReferenceBuilder.typeRef(it);
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(instance==null)");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("instance = new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("return instance;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getInstance", _typeRef_3, _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method);
      EList<JvmMember> _members_5 = it.getMembers();
      JvmTypeReference _typeRef_4 = this._typeReferenceBuilder.typeRef(void.class);
      final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_5 = this._typeReferenceBuilder.typeRef(Event.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "evento", _typeRef_5);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmTypeReference _typeRef_6 = this._typeReferenceBuilder.typeRef(Map.class);
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "map", _typeRef_6);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("eventBroker.multicast(evento, map);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "multicast", _typeRef_4, _function_6);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_1);
      EList<JvmMember> _members_6 = it.getMembers();
      JvmTypeReference _typeRef_5 = this._typeReferenceBuilder.typeRef(BrokerMessageHandler.class);
      final Procedure1<JvmField> _function_7 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(KetalMessageHandler.class);
            _builder.append(_typeRef, "");
            _builder.append("()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_3 = this._jvmTypesBuilder.toField(eventDefinitionClass, "ketalMessageHandler", _typeRef_5, _function_7);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_6, _field_3);
      EList<JvmMember> _members_7 = it.getMembers();
      JvmTypeReference _typeRef_6 = this._typeReferenceBuilder.typeRef(EventBroker.class);
      final Procedure1<JvmField> _function_8 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(JGroupsEventBroker.class);
            _builder.append(_typeRef, "");
            _builder.append("(\"Eketal\", ketalMessageHandler)");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_4 = this._jvmTypesBuilder.toField(eventDefinitionClass, "eventBrokerHandler", _typeRef_6, _function_8);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_7, _field_4);
      EList<JvmMember> _members_8 = it.getMembers();
      JvmTypeReference _typeRef_7 = this._typeReferenceBuilder.typeRef(void.class);
      final Procedure1<JvmOperation> _function_9 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_8 = this._typeReferenceBuilder.typeRef(Event.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "evento", _typeRef_8);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmTypeReference _typeRef_9 = this._typeReferenceBuilder.typeRef(Map.class);
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "map", _typeRef_9);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("eventBrokerHandler.multicastSync(evento, map);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "multicastSync", _typeRef_7, _function_9);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_8, _method_2);
      EList<JvmMember> _members_9 = it.getMembers();
      JvmTypeReference _typeRef_8 = this._typeReferenceBuilder.typeRef(Vector.class);
      final Procedure1<JvmOperation> _function_10 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_9 = this._typeReferenceBuilder.typeRef(Event.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "evento", _typeRef_9);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return ((((");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(KetalMessageHandler.class);
            _builder.append(_typeRef, "");
            _builder.append(") ketalMessageHandler).getVectorEvents()));");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getEvents", _typeRef_8, _function_10);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_9, _method_3);
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  public void createGroupClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass claseGrupos) {
    JvmGenericType _class = this._jvmTypesBuilder.toClass(claseGrupos, ("co.edu.icesi.eketal.groupsimpl." + EketalJvmModelInferrer.groupClassName));
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Set.class);
      final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(TreeSet.class);
            _builder.append(_typeRef, "");
            _builder.append("<");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef_1, "");
            _builder.append(">()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(claseGrupos, "grupos", _typeRef, _function_1);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmConstructor> _function_2 = (JvmConstructor it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("agregarGrupos();");
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(claseGrupos, _function_2);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_1, _constructor);
      EList<JvmMember> _members_2 = it.getMembers();
      JvmTypeReference _typeRef_1 = this._typeReferenceBuilder.typeRef(Boolean.class);
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_2 = this._typeReferenceBuilder.typeRef(String.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "nuevoGrupo", _typeRef_2);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return grupos.add(nuevoGrupo);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(claseGrupos, "addGroup", _typeRef_1, _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      EList<JvmMember> _members_3 = it.getMembers();
      JvmTypeReference _typeRef_2 = this._typeReferenceBuilder.typeRef(Boolean.class);
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_3 = this._typeReferenceBuilder.typeRef(String.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupoEliminar", _typeRef_3);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return grupos.remove(grupoEliminar);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(claseGrupos, "removeGroup", _typeRef_2, _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_1);
      EList<JvmMember> _members_4 = it.getMembers();
      JvmTypeReference _typeRef_3 = this._typeReferenceBuilder.typeRef(void.class);
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              EList<Decl> _declarations = claseGrupos.getDeclarations();
              for(final Decl grupo : _declarations) {
                {
                  if ((grupo instanceof Group)) {
                    Group grupoTemp = ((Group) grupo);
                    _builder.newLineIfNotEmpty();
                    _builder.append("addGroup(\"");
                    String _name = grupoTemp.getName();
                    _builder.append(_name, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(claseGrupos, "agregarGrupos", _typeRef_3, _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_2);
      EList<JvmMember> _members_5 = it.getMembers();
      JvmTypeReference _typeRef_4 = this._typeReferenceBuilder.typeRef(boolean.class);
      final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_5 = this._typeReferenceBuilder.typeRef(String.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupo", _typeRef_5);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return true;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(claseGrupos, "on", _typeRef_4, _function_6);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_3);
      EList<JvmMember> _members_6 = it.getMembers();
      JvmTypeReference _typeRef_5 = this._typeReferenceBuilder.typeRef(boolean.class);
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmTypeReference _typeRef_6 = this._typeReferenceBuilder.typeRef(String.class);
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "nombreGrupo", _typeRef_6);
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(grupos==null){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("return grupos.contains(nombreGrupo);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(claseGrupos, "host", _typeRef_5, _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_4);
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  public JvmOperation AutomatonInit(final Automaton declaracion) {
    JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(void.class);
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      it.setVisibility(JvmVisibility.PRIVATE);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("//Relaci√≥n evento caracter");
          _builder.newLine();
          JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Map.class);
          _builder.append(_typeRef, "");
          _builder.append("<String, Character> mapping = new ");
          JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(TreeMap.class);
          _builder.append(_typeRef_1, "");
          _builder.append("<String, Character>();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Estado inicial");
          _builder.newLine();
          JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
          _builder.append(_typeRef_2, "");
          _builder.append(" inicial = null;");
          _builder.newLineIfNotEmpty();
          _builder.append("//lista de estados finales");
          _builder.newLine();
          JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class);
          _builder.append(_typeRef_3, "");
          _builder.append("<");
          JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
          _builder.append(_typeRef_4, "");
          _builder.append("> estadosFinales = new ");
          JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
          _builder.append(_typeRef_5, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Conjunto de nombres y estados");
          _builder.newLine();
          JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Map.class);
          _builder.append(_typeRef_6, "");
          _builder.append("<String, ");
          JvmTypeReference _typeRef_7 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
          _builder.append(_typeRef_7, "");
          _builder.append("> estados = new ");
          JvmTypeReference _typeRef_8 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashMap.class);
          _builder.append(_typeRef_8, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("//conjunto de transiciones");
          _builder.newLine();
          JvmTypeReference _typeRef_9 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
          _builder.append(_typeRef_9, "");
          _builder.append("<");
          JvmTypeReference _typeRef_10 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
          _builder.append(_typeRef_10, "");
          _builder.append("> transitionSet = new ");
          JvmTypeReference _typeRef_11 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
          _builder.append(_typeRef_11, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("//map de expresiones con caracteres");
          _builder.newLine();
          JvmTypeReference _typeRef_12 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class);
          _builder.append(_typeRef_12, "");
          _builder.append("<");
          JvmTypeReference _typeRef_13 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class);
          _builder.append(_typeRef_13, "");
          _builder.append(", ");
          JvmTypeReference _typeRef_14 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class);
          _builder.append(_typeRef_14, "");
          _builder.append("> expressions = new ");
          JvmTypeReference _typeRef_15 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class);
          _builder.append(_typeRef_15, "");
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("int consecutivo = 65;");
          _builder.newLine();
          _builder.append("Character caracter = (char)consecutivo;");
          _builder.newLine();
          _builder.append("String nombreEvento = \"\";");
          _builder.newLine();
          _builder.append("String estadoLlegada = \"\";");
          _builder.newLine();
          _builder.newLine();
          {
            EList<Step> _steps = declaracion.getSteps();
            for(final Step step : _steps) {
              _builder.append("//Definici√≥n del estado: ");
              String _name = step.getName();
              _builder.append(_name, "");
              _builder.newLineIfNotEmpty();
              _builder.append("String estado");
              String _name_1 = step.getName();
              String _firstUpper = StringExtensions.toFirstUpper(_name_1);
              _builder.append(_firstUpper, "");
              _builder.append(" = \"");
              String _name_2 = step.getName();
              _builder.append(_name_2, "");
              _builder.append("\";");
              _builder.newLineIfNotEmpty();
              _builder.append("estados.put(estado");
              String _name_3 = step.getName();
              String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
              _builder.append(_firstUpper_1, "");
              _builder.append(", new ");
              JvmTypeReference _typeRef_16 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
              _builder.append(_typeRef_16, "");
              _builder.append("());");
              _builder.newLineIfNotEmpty();
              {
                if (((!Objects.equal(step.getType(), null)) && Objects.equal(step.getType(), StateType.START))) {
                  _builder.append("//");
                  StateType _type = step.getType();
                  _builder.append(_type, "");
                  _builder.append(" ");
                  _builder.append(StateType.START, "");
                  _builder.append(" ");
                  _builder.append(StateType.START_VALUE, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("//Estado inicial: ");
                  String _name_4 = step.getName();
                  _builder.append(_name_4, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("inicial = estados.get(estado");
                  String _name_5 = step.getName();
                  String _firstUpper_2 = StringExtensions.toFirstUpper(_name_5);
                  _builder.append(_firstUpper_2, "");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Step> _steps_1 = declaracion.getSteps();
            for(final Step step_1 : _steps_1) {
              {
                EList<TransDef> _transitions = step_1.getTransitions();
                boolean _isEmpty = _transitions.isEmpty();
                boolean _not = (!_isEmpty);
                if (_not) {
                  {
                    EList<TransDef> _transitions_1 = step_1.getTransitions();
                    for(final TransDef transition : _transitions_1) {
                      _builder.append("//Transicion de ");
                      EvDecl _event = transition.getEvent();
                      String _name_6 = _event.getName();
                      _builder.append(_name_6, "");
                      _builder.append(" -> ");
                      Step _target = transition.getTarget();
                      String _name_7 = _target.getName();
                      _builder.append(_name_7, "");
                      _builder.newLineIfNotEmpty();
                      _builder.append("estadoLlegada = \"");
                      Step _target_1 = transition.getTarget();
                      String _name_8 = _target_1.getName();
                      _builder.append(_name_8, "");
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!estados.containsKey(estadoLlegada)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("estados.put(estado");
                      String _name_9 = step_1.getName();
                      String _firstUpper_3 = StringExtensions.toFirstUpper(_name_9);
                      _builder.append(_firstUpper_3, "\t");
                      _builder.append(", new ");
                      JvmTypeReference _typeRef_17 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                      _builder.append(_typeRef_17, "\t");
                      _builder.append("());");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("caracter = (char)consecutivo;");
                      _builder.newLine();
                      _builder.append("consecutivo++;");
                      _builder.newLine();
                      _builder.append("nombreEvento = \"");
                      EvDecl _event_1 = transition.getEvent();
                      String _name_10 = _event_1.getName();
                      _builder.append(_name_10, "");
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!mapping.containsKey(nombreEvento)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("mapping.put(nombreEvento, caracter);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("expressions.put(new ");
                      _builder.append(DefaultEqualsExpression.class, "\t");
                      _builder.append("(new ");
                      _builder.append(NamedEvent.class, "\t");
                      _builder.append("(nombreEvento)), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      JvmTypeReference _typeRef_18 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_18, "");
                      _builder.append(" ");
                      String _name_11 = step_1.getName();
                      _builder.append(_name_11, "");
                      EvDecl _event_2 = transition.getEvent();
                      String _name_12 = _event_2.getName();
                      String _firstUpper_4 = StringExtensions.toFirstUpper(_name_12);
                      _builder.append(_firstUpper_4, "");
                      _builder.append(" = new ");
                      JvmTypeReference _typeRef_19 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_19, "");
                      _builder.append("(estados.get(estado");
                      String _name_13 = step_1.getName();
                      String _firstUpper_5 = StringExtensions.toFirstUpper(_name_13);
                      _builder.append(_firstUpper_5, "");
                      _builder.append("), estados.get(estadoLlegada), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("transitionSet.add(");
                      String _name_14 = step_1.getName();
                      _builder.append(_name_14, "");
                      EvDecl _event_3 = transition.getEvent();
                      String _name_15 = _event_3.getName();
                      String _firstUpper_6 = StringExtensions.toFirstUpper(_name_15);
                      _builder.append(_firstUpper_6, "");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.newLine();
                    }
                  }
                }
              }
              {
                StateType _type_1 = step_1.getType();
                boolean _equals = Objects.equal(_type_1, StateType.END);
                if (_equals) {
                  _builder.append("//Estado final ");
                  String _name_16 = step_1.getName();
                  String _firstUpper_7 = StringExtensions.toFirstUpper(_name_16);
                  _builder.append(_firstUpper_7, "");
                  _builder.newLineIfNotEmpty();
                  _builder.append("estados.get(estado");
                  String _name_17 = step_1.getName();
                  String _firstUpper_8 = StringExtensions.toFirstUpper(_name_17);
                  _builder.append(_firstUpper_8, "");
                  _builder.append(").setAccept(true);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("estadosFinales.add(estados.get(estado");
                  String _name_18 = step_1.getName();
                  String _firstUpper_9 = StringExtensions.toFirstUpper(_name_18);
                  _builder.append(_firstUpper_9, "");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          JvmTypeReference _typeRef_20 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
          _builder.append(_typeRef_20, "");
          _builder.append(" automata = new Automaton(transitionSet, inicial, estadosFinales, expressions);");
          _builder.newLineIfNotEmpty();
          _builder.append("automata.initializeAutomaton();");
          _builder.newLine();
          _builder.append("instance = automata;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    final JvmOperation method = this._jvmTypesBuilder.toMethod(declaracion, "initialize", _typeRef, _function);
    return method;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Model) {
      _infer((Model)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}

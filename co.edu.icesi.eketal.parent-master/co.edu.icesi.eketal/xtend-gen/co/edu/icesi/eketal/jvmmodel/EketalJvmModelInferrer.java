/**
 * generated by Xtext 2.9.2
 */
package co.edu.icesi.eketal.jvmmodel;

import co.edu.icesi.eketal.eketal.Automaton;
import co.edu.icesi.eketal.eketal.EvDecl;
import co.edu.icesi.eketal.eketal.EventClass;
import co.edu.icesi.eketal.eketal.Group;
import co.edu.icesi.eketal.eketal.Host;
import co.edu.icesi.eketal.eketal.JVarD;
import co.edu.icesi.eketal.eketal.Ltl;
import co.edu.icesi.eketal.eketal.LtlAnd;
import co.edu.icesi.eketal.eketal.LtlExpression;
import co.edu.icesi.eketal.eketal.LtlOr;
import co.edu.icesi.eketal.eketal.LtlThen;
import co.edu.icesi.eketal.eketal.LtlUntil;
import co.edu.icesi.eketal.eketal.MSig;
import co.edu.icesi.eketal.eketal.Model;
import co.edu.icesi.eketal.eketal.Pos;
import co.edu.icesi.eketal.eketal.Protocol;
import co.edu.icesi.eketal.eketal.Rc;
import co.edu.icesi.eketal.eketal.StateType;
import co.edu.icesi.eketal.eketal.Step;
import co.edu.icesi.eketal.eketal.TransDef;
import co.edu.icesi.eketal.eketal.UnaryLtl;
import co.edu.icesi.eketal.outputconfiguration.OutputConfigurationAdapter;
import co.edu.icesi.ketal.core.And;
import co.edu.icesi.ketal.core.BuchiAutomaton;
import co.edu.icesi.ketal.core.BuchiTransition;
import co.edu.icesi.ketal.core.DefaultEqualsExpression;
import co.edu.icesi.ketal.core.Event;
import co.edu.icesi.ketal.core.Expression;
import co.edu.icesi.ketal.core.NamedEvent;
import co.edu.icesi.ketal.core.NotExpression;
import co.edu.icesi.ketal.core.Or;
import co.edu.icesi.ketal.core.State;
import co.edu.icesi.ketal.core.Transition;
import co.edu.icesi.ketal.core.TrueExpression;
import co.edu.icesi.ketal.distribution.BrokerMessageHandler;
import co.edu.icesi.ketal.distribution.EventBroker;
import co.edu.icesi.ketal.distribution.ReceiverMessageHandler;
import co.edu.icesi.ketal.distribution.transports.jgroups.JGroupsEventBroker;
import co.edu.icesi.ltl2buchi.translator.BuchiTranslator;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import jbase.jbase.XJJvmFormalParameter;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.jgroups.Message;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class EketalJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public static String groupClassName = "_GroupsControl";
  
  public static String handlerClassName = "_EventHandler";
  
  public static String reaction = "_Reaction";
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Model element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final JvmGenericType implementation = this._jvmTypesBuilder.toClass(element, this._iQualifiedNameProvider.getFullyQualifiedName(element));
    if ((implementation == null)) {
      return;
    }
    EventClass eventClass = element.getTypeDeclaration();
    JvmGenericType eventClassGenerate = this._jvmTypesBuilder.toClass(eventClass, this._iQualifiedNameProvider.getFullyQualifiedName(eventClass));
    EList<Adapter> _eAdapters = eventClassGenerate.eAdapters();
    OutputConfigurationAdapter _outputConfigurationAdapter = new OutputConfigurationAdapter(IFileSystemAccess.DEFAULT_OUTPUT);
    _eAdapters.add(_outputConfigurationAdapter);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      InputOutput.<String>println("l√≠nea 97 Inferrer");
    };
    acceptor.<JvmGenericType>accept(eventClassGenerate, _function);
    final EventClass groupsClass = element.getTypeDeclaration();
    this.createGroupClass(acceptor, groupsClass);
    Iterable<Ltl> buchis = Iterables.<Ltl>filter(element.getTypeDeclaration().getDeclarations(), Ltl.class);
    this.createBuchis(acceptor, buchis);
    Iterable<Automaton> automatons = Iterables.<Automaton>filter(element.getTypeDeclaration().getDeclarations(), Automaton.class);
    final Function1<Automaton, Set<String>> _function_1 = (Automaton a) -> {
      final Set<String> steps = new TreeSet<String>();
      final Function1<Step, Boolean> _function_2 = (Step s) -> {
        String _name = a.getName();
        String _plus = (_name + ":");
        String _name_1 = s.getName();
        String _plus_1 = (_plus + _name_1);
        return Boolean.valueOf(steps.add(_plus_1));
      };
      IterableExtensions.<Step>forall(a.getSteps(), _function_2);
      return steps;
    };
    final Map<Automaton, Set<String>> eventsOfAutomaton = IterableExtensions.<Automaton, Set<String>>toInvertedMap(automatons, _function_1);
    String nameAutomaton = null;
    for (final Automaton declaracion : automatons) {
      {
        String _firstUpper = StringExtensions.toFirstUpper(declaracion.getName());
        String _plus = ("co.edu.icesi.eketal.automaton." + _firstUpper);
        nameAutomaton = _plus;
        final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
          final JvmTypeReference typeAutomaton = this._typeReferenceBuilder.typeRef(it);
          EList<JvmTypeReference> _superTypes = it.getSuperTypes();
          JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
          this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
          EList<JvmMember> _members = it.getMembers();
          final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
            it_1.setStatic(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(declaracion, "instance", typeAutomaton, _function_3);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
          EList<JvmMember> _members_1 = it.getMembers();
          final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
            it_1.setStatic(true);
            it_1.setVisibility(JvmVisibility.PUBLIC);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("new ");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashMap.class);
                _builder.append(_typeRef);
                _builder.append("<String, ");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef_1);
                _builder.append(">()");
              }
            };
            this._jvmTypesBuilder.setInitializer(it_1, _client);
          };
          JvmField _field_1 = this._jvmTypesBuilder.toField(declaracion, "estados", this._typeReferenceBuilder.typeRef(HashMap.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(State.class)), _function_4);
          this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
          EList<JvmMember> _members_2 = it.getMembers();
          final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("if(instance==null){");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("//lista de estados finales");
                _builder.newLine();
                _builder.append("\t");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class));
                _builder.append(_typeRef, "\t");
                _builder.append(" estadosFinales = new ");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                _builder.append(_typeRef_1, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//conjunto de transiciones");
                _builder.newLine();
                _builder.append("\t  \t");
                JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class));
                _builder.append(_typeRef_2, "\t  \t");
                _builder.append(" transitionSet = new ");
                JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                _builder.append(_typeRef_3, "\t  \t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//map de expresiones con caracteres");
                _builder.newLine();
                _builder.append("\t  \t");
                JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
                _builder.append(_typeRef_4, "\t  \t");
                _builder.append(" expressions = new ");
                JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class);
                _builder.append(_typeRef_5, "\t  \t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t  \t");
                JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef_6, "\t  \t");
                _builder.append(" initial = initialize(transitionSet, estadosFinales, expressions);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("return new ");
                _builder.append(typeAutomaton, "\t");
                _builder.append("(transitionSet, initial, estadosFinales, expressions);");
                _builder.newLineIfNotEmpty();
                _builder.append("}else{");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("return instance;\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(declaracion, "getInstance", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class), _function_5);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
          EList<JvmMember> _members_3 = it.getMembers();
          final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "event", this._typeReferenceBuilder.typeRef(Event.class));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("if(event instanceof ");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(NamedEvent.class);
                _builder.append(_typeRef);
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t");
                _builder.append("return super.evaluate(event);");
                _builder.newLine();
                _builder.append("   \t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("   \t\t");
                _builder.append("return false;");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(declaracion, "evaluate", this._typeReferenceBuilder.typeRef(boolean.class), _function_6);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_1);
          EList<JvmMember> _members_4 = it.getMembers();
          final Procedure1<JvmConstructor> _function_7 = (JvmConstructor it_1) -> {
            it_1.setVisibility(JvmVisibility.PRIVATE);
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "transitions", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(Transition.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
            EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
            JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(declaracion, "begin", this._typeReferenceBuilder.typeRef(State.class));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
            EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
            JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(declaracion, "finalStates", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
            EList<JvmFormalParameter> _parameters_3 = it_1.getParameters();
            JvmFormalParameter _parameter_3 = this._jvmTypesBuilder.toParameter(declaracion, "expressions", 
              this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_3, _parameter_3);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("super(transitions, begin, finalStates, expressions);");
                _builder.newLine();
                _builder.append("initializeAutomaton();");
                _builder.newLine();
                _builder.append("instance = this;");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(declaracion, _function_7);
          this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_4, _constructor);
          EList<JvmMember> _members_5 = it.getMembers();
          JvmOperation _AutomatonInit = this.AutomatonInit(((Automaton) declaracion));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _AutomatonInit);
        };
        acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(declaracion, nameAutomaton), _function_2);
      }
    }
    EventClass reactions = element.getTypeDeclaration();
    this.createReactionClass(acceptor, reactions, eventsOfAutomaton);
    final EventClass handlerClass = element.getTypeDeclaration();
    this.createHandlerClass(acceptor, handlerClass, IterableExtensions.<Automaton>toSet(automatons), IterableExtensions.<Ltl>toSet(buchis));
  }
  
  public void createBuchis(final IJvmDeclaredTypeAcceptor acceptor, final Iterable<Ltl> ltls) {
    try {
      String nameAutomaton = null;
      for (final Ltl ltl : ltls) {
        LtlExpression _predicate = ltl.getPredicate();
        boolean _tripleNotEquals = (_predicate != null);
        if (_tripleNotEquals) {
          LtlExpression tPredicate = ltl.getPredicate();
          if ((tPredicate == null)) {
            return;
          }
          String formulae = this.retrieveFormula(tPredicate);
          InputOutput.<String>println(formulae);
          final String buchiMachine = BuchiTranslator.translateToString(formulae);
          InputOutput.<String>println(buchiMachine);
          String _firstUpper = StringExtensions.toFirstUpper(ltl.getName());
          String _plus = ("co.edu.icesi.eketal.buchiautomaton." + _firstUpper);
          nameAutomaton = _plus;
          final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
            final JvmTypeReference typeAutomaton = this._typeReferenceBuilder.typeRef(it);
            EList<JvmTypeReference> _superTypes = it.getSuperTypes();
            JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BuchiAutomaton.class);
            this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
            EList<JvmMember> _members = it.getMembers();
            final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
              it_1.setStatic(true);
            };
            JvmField _field = this._jvmTypesBuilder.toField(ltl, "instance", typeAutomaton, _function_1);
            this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
            EList<JvmMember> _members_1 = it.getMembers();
            final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
              it_1.setStatic(true);
              it_1.setVisibility(JvmVisibility.PUBLIC);
              StringConcatenationClient _client = new StringConcatenationClient() {
                @Override
                protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                  _builder.append("new ");
                  JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashMap.class);
                  _builder.append(_typeRef);
                  _builder.append("<String, ");
                  JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                  _builder.append(_typeRef_1);
                  _builder.append(">()");
                }
              };
              this._jvmTypesBuilder.setInitializer(it_1, _client);
            };
            JvmField _field_1 = this._jvmTypesBuilder.toField(ltl, "estados", this._typeReferenceBuilder.typeRef(HashMap.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(State.class)), _function_2);
            this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
            EList<JvmMember> _members_2 = it.getMembers();
            final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
              it_1.setStatic(true);
              this._jvmTypesBuilder.setDocumentation(it_1, buchiMachine);
              StringConcatenationClient _client = new StringConcatenationClient() {
                @Override
                protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                  _builder.append("if(instance==null){");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("//lista de estados finales");
                  _builder.newLine();
                  _builder.append("\t");
                  JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class));
                  _builder.append(_typeRef, "\t");
                  _builder.append(" estadosFinales = new ");
                  JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                  _builder.append(_typeRef_1, "\t");
                  _builder.append("();");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("//conjunto de transiciones");
                  _builder.newLine();
                  _builder.append("\t  \t");
                  JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(BuchiTransition.class));
                  _builder.append(_typeRef_2, "\t  \t");
                  _builder.append(" transitionSet = new ");
                  JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                  _builder.append(_typeRef_3, "\t  \t");
                  _builder.append("();");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("//map de expresiones con caracteres");
                  _builder.newLine();
                  _builder.append("\t  \t");
                  JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
                  _builder.append(_typeRef_4, "\t  \t");
                  _builder.append(" expressions = new ");
                  JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class);
                  _builder.append(_typeRef_5, "\t  \t");
                  _builder.append("();");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t  \t");
                  JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                  _builder.append(_typeRef_6, "\t  \t");
                  _builder.append(" initial = initialize(transitionSet, estadosFinales, expressions);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("return new ");
                  _builder.append(typeAutomaton, "\t");
                  _builder.append("(transitionSet, initial, estadosFinales, expressions);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("}else{");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return instance;\t\t\t\t\t\t");
                  _builder.newLine();
                  _builder.append("}");
                  _builder.newLine();
                }
              };
              this._jvmTypesBuilder.setBody(it_1, _client);
            };
            JvmOperation _method = this._jvmTypesBuilder.toMethod(ltl, "getInstance", this._typeReferenceBuilder.typeRef(BuchiAutomaton.class), _function_3);
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
            EList<JvmMember> _members_3 = it.getMembers();
            final Procedure1<JvmConstructor> _function_4 = (JvmConstructor it_1) -> {
              it_1.setVisibility(JvmVisibility.PRIVATE);
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(ltl, "transitions", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(BuchiTransition.class)));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
              JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(ltl, "begin", this._typeReferenceBuilder.typeRef(State.class));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
              EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
              JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(ltl, "finalStates", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
              EList<JvmFormalParameter> _parameters_3 = it_1.getParameters();
              JvmFormalParameter _parameter_3 = this._jvmTypesBuilder.toParameter(ltl, "expressions", this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_3, _parameter_3);
              StringConcatenationClient _client = new StringConcatenationClient() {
                @Override
                protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                  _builder.append("super(transitions, begin, finalStates, expressions);");
                  _builder.newLine();
                  _builder.append("findTransitionsCurrentState();");
                  _builder.newLine();
                  _builder.append("instance = this;");
                  _builder.newLine();
                }
              };
              this._jvmTypesBuilder.setBody(it_1, _client);
            };
            JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(ltl, _function_4);
            this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
            EList<JvmMember> _members_4 = it.getMembers();
            JvmOperation _BuchiAutomatonInit = this.BuchiAutomatonInit(buchiMachine, ((Ltl) ltl));
            this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _BuchiAutomatonInit);
          };
          acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(ltl, nameAutomaton), _function);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public JvmOperation BuchiAutomatonInit(final String string, final Ltl declaracion) {
    try {
      StringReader _stringReader = new StringReader(string);
      BufferedReader bufReader = new BufferedReader(_stringReader);
      final TreeMap<String, List<String>> states = new TreeMap<String, List<String>>();
      final List<String> finalStates = new ArrayList<String>();
      String line = null;
      String init = null;
      String regex = "[().,]+";
      while (((line = bufReader.readLine()) != null)) {
        boolean _startsWith = line.startsWith("S");
        if (_startsWith) {
          String[] tempState = line.split("=");
          init = tempState[0];
          String transitions = tempState[1];
          final ArrayList<String> transitionOfState = CollectionLiterals.<String>newArrayList();
          if (((transitions != null) && (!Objects.equal(transitions, "")))) {
            String result = transitions.replaceAll(regex, "");
            final Function1<String, String> _function = (String t) -> {
              return t.split(Pattern.quote("->"))[1].trim();
            };
            final BiConsumer<String, List<String>> _function_1 = (String stt, List<String> values) -> {
              final Function1<String, CharSequence> _function_2 = (String x) -> {
                return x.split(Pattern.quote("->"))[0];
              };
              String _join = IterableExtensions.<String>join(values, "|", _function_2);
              String _plus = (_join + "->");
              String _plus_1 = (_plus + stt);
              transitionOfState.add(_plus_1);
            };
            IterableExtensions.<String, String>groupBy(((Iterable<? extends String>)Conversions.doWrapArray(result.split(Pattern.quote("|")))), _function).forEach(_function_1);
            states.put(init, transitionOfState);
          } else {
            states.put(init, null);
          }
        } else {
          boolean _startsWith_1 = line.startsWith("RES");
          if (_startsWith_1) {
            int _length = line.length();
            int _minus = (_length - 1);
            states.put(line.substring(6, _minus), null);
          } else {
            boolean _startsWith_2 = line.startsWith("AS");
            if (_startsWith_2) {
              int _length_1 = line.length();
              int _minus_1 = (_length_1 - 1);
              final Consumer<String> _function_2 = (String s) -> {
                finalStates.add(s.trim());
              };
              ((List<String>)Conversions.doWrapArray(line.substring(0, _minus_1).split(Pattern.quote("{"))[1].split(","))).forEach(_function_2);
            } else {
              boolean _equals = line.equals("Empty");
              if (_equals) {
                return null;
              } else {
              }
            }
          }
        }
      }
      final Set<String> setStates = states.keySet();
      final String initial = IterableExtensions.<String>head(setStates);
      final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
        EList<JvmFormalParameter> _parameters = it.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "transitionSet", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(BuchiTransition.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(declaracion, "estadosFinales", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        EList<JvmFormalParameter> _parameters_2 = it.getParameters();
        JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(declaracion, "expressions", 
          this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
        it.setStatic(true);
        it.setVisibility(JvmVisibility.PRIVATE);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("//Relaci√≥n evento caracter");
            _builder.newLine();
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Map.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
            _builder.append(_typeRef);
            _builder.append(" mapping = new ");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(TreeMap.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
            _builder.append(_typeRef_1);
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("//Estado inicial");
            _builder.newLine();
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
            _builder.append(_typeRef_2);
            _builder.append(" inicial = null;");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("int consecutivo = 65;");
            _builder.newLine();
            _builder.append(Character.class);
            _builder.append(" caracter = (char)consecutivo;");
            _builder.newLineIfNotEmpty();
            _builder.append(Expression.class);
            _builder.append(" expression;");
            _builder.newLineIfNotEmpty();
            _builder.append(String.class);
            _builder.append(" estadoLlegada = \"\";");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            {
              for(final String step : setStates) {
                _builder.append("//Definici√≥n del estado: ");
                _builder.append(step);
                _builder.newLineIfNotEmpty();
                _builder.append("String estado");
                String _firstUpper = StringExtensions.toFirstUpper(step);
                _builder.append(_firstUpper);
                _builder.append(" = \"");
                _builder.append(step);
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("estados.put(estado");
                String _firstUpper_1 = StringExtensions.toFirstUpper(step);
                _builder.append(_firstUpper_1);
                _builder.append(", new ");
                JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef_3);
                _builder.append("());");
                _builder.newLineIfNotEmpty();
                {
                  boolean _equals = Objects.equal(step, initial);
                  if (_equals) {
                    _builder.append("//Estado inicial: ");
                    _builder.append(step);
                    _builder.newLineIfNotEmpty();
                    _builder.append("inicial = estados.get(estado");
                    String _firstUpper_2 = StringExtensions.toFirstUpper(step);
                    _builder.append(_firstUpper_2);
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.newLine();
            {
              for(final String step_1 : setStates) {
                {
                  List<String> _get = states.get(step_1);
                  boolean _tripleNotEquals = (_get != null);
                  if (_tripleNotEquals) {
                    {
                      List<String> _get_1 = states.get(step_1);
                      for(final String transition : _get_1) {
                        String[] splitTransition = transition.split("->");
                        _builder.newLineIfNotEmpty();
                        _builder.append("//Transicion ");
                        _builder.append(transition);
                        _builder.newLineIfNotEmpty();
                        _builder.append("estadoLlegada = \"");
                        String _get_2 = splitTransition[1];
                        _builder.append(_get_2);
                        _builder.append("\";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("if(!estados.containsKey(estadoLlegada)){");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("estados.put(estado");
                        String _firstUpper_3 = StringExtensions.toFirstUpper(step_1);
                        _builder.append(_firstUpper_3, "\t");
                        _builder.append(", new ");
                        JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                        _builder.append(_typeRef_4, "\t");
                        _builder.append("());");
                        _builder.newLineIfNotEmpty();
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("caracter = (char)consecutivo;");
                        _builder.newLine();
                        _builder.append("consecutivo++;");
                        _builder.newLine();
                        _builder.append("expression = ");
                        StringConcatenationClient _processExpression = EketalJvmModelInferrer.this.processExpression(splitTransition[0]);
                        _builder.append(_processExpression);
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("if(!expressions.containsKey(expression)){");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("expressions.put(expression, caracter);");
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                        JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(BuchiTransition.class);
                        _builder.append(_typeRef_5);
                        _builder.append(" ");
                        _builder.append(step_1);
                        String _firstUpper_4 = StringExtensions.toFirstUpper(splitTransition[1]);
                        _builder.append(_firstUpper_4);
                        _builder.append(" = new ");
                        JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(BuchiTransition.class);
                        _builder.append(_typeRef_6);
                        _builder.append("(estados.get(estado");
                        String _firstUpper_5 = StringExtensions.toFirstUpper(step_1);
                        _builder.append(_firstUpper_5);
                        _builder.append("), estados.get(estadoLlegada), expressions.get(expression), expression);");
                        _builder.newLineIfNotEmpty();
                        _builder.append("transitionSet.add(");
                        _builder.append(step_1);
                        String _firstUpper_6 = StringExtensions.toFirstUpper(splitTransition[1]);
                        _builder.append(_firstUpper_6);
                        _builder.append(");");
                        _builder.newLineIfNotEmpty();
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.newLine();
                {
                  boolean _contains = finalStates.contains(step_1);
                  if (_contains) {
                    _builder.append("//Estado final ");
                    String _firstUpper_7 = StringExtensions.toFirstUpper(step_1);
                    _builder.append(_firstUpper_7);
                    _builder.newLineIfNotEmpty();
                    _builder.append("estados.get(estado");
                    String _firstUpper_8 = StringExtensions.toFirstUpper(step_1);
                    _builder.append(_firstUpper_8);
                    _builder.append(").setAccept(true);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("estadosFinales.add(estados.get(estado");
                    String _firstUpper_9 = StringExtensions.toFirstUpper(step_1);
                    _builder.append(_firstUpper_9);
                    _builder.append("));");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("return inicial;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it, _client);
      };
      final JvmOperation method = this._jvmTypesBuilder.toMethod(declaracion, "initialize", this._typeReferenceBuilder.typeRef(State.class), _function);
      return method;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private StringConcatenationClient processExpression(final String string) {
    boolean _contains = string.contains("|");
    if (_contains) {
      String[] array = string.split(Pattern.quote("|"));
      final String left = array[0];
      final String right = IterableExtensions.join(((Iterable<?>)Conversions.doWrapArray(Arrays.<String>copyOfRange(array, 1, array.length))), "|");
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("new ");
          _builder.append(Or.class);
          _builder.append("(");
          StringConcatenationClient _processExpression = EketalJvmModelInferrer.this.processExpression(left);
          _builder.append(_processExpression);
          _builder.append(",");
          StringConcatenationClient _processExpression_1 = EketalJvmModelInferrer.this.processExpression(right);
          _builder.append(_processExpression_1);
          _builder.append(")");
        }
      };
      return _client;
    } else {
      boolean _contains_1 = string.contains("&");
      if (_contains_1) {
        String[] array_1 = string.split(Pattern.quote("&"));
        final String left_1 = array_1[0];
        final String right_1 = IterableExtensions.join(((Iterable<?>)Conversions.doWrapArray(Arrays.<String>copyOfRange(array_1, 1, array_1.length))), "&");
        StringConcatenationClient _client_1 = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(And.class);
            _builder.append("(");
            StringConcatenationClient _processExpression = EketalJvmModelInferrer.this.processExpression(left_1);
            _builder.append(_processExpression);
            _builder.append(",");
            StringConcatenationClient _processExpression_1 = EketalJvmModelInferrer.this.processExpression(right_1);
            _builder.append(_processExpression_1);
            _builder.append(")");
          }
        };
        return _client_1;
      } else {
        boolean _startsWith = string.startsWith("!");
        if (_startsWith) {
          StringConcatenationClient _client_2 = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("new ");
              _builder.append(NotExpression.class);
              _builder.append("(");
              StringConcatenationClient _processExpression = EketalJvmModelInferrer.this.processExpression(string.substring(1));
              _builder.append(_processExpression);
              _builder.append(")");
            }
          };
          return _client_2;
        } else {
          boolean _equalsIgnoreCase = string.equalsIgnoreCase("TRUE");
          if (_equalsIgnoreCase) {
            StringConcatenationClient _client_3 = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("new ");
                _builder.append(TrueExpression.class);
                _builder.append("()");
              }
            };
            return _client_3;
          } else {
            StringConcatenationClient _client_4 = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("new ");
                _builder.append(DefaultEqualsExpression.class);
                _builder.append("(new ");
                _builder.append(NamedEvent.class);
                _builder.append("(\"");
                _builder.append(string);
                _builder.append("\"))");
              }
            };
            return _client_4;
          }
        }
      }
    }
  }
  
  private String retrieveFormula(final LtlExpression expression) {
    EvDecl _event = expression.getEvent();
    boolean _tripleNotEquals = (_event != null);
    if (_tripleNotEquals) {
      return expression.getEvent().getName();
    }
    boolean _matched = false;
    if (expression instanceof LtlOr) {
      _matched=true;
      LtlOr or = ((LtlOr) expression);
      String _retrieveFormula = this.retrieveFormula(or.getLeft());
      String _plus = ("(" + _retrieveFormula);
      String _plus_1 = (_plus + "||");
      String _retrieveFormula_1 = this.retrieveFormula(or.getRight());
      String _plus_2 = (_plus_1 + _retrieveFormula_1);
      return (_plus_2 + ")");
    }
    if (!_matched) {
      if (expression instanceof LtlAnd) {
        _matched=true;
        LtlAnd and = ((LtlAnd) expression);
        String _retrieveFormula = this.retrieveFormula(and.getLeft());
        String _plus = ("(" + _retrieveFormula);
        String _plus_1 = (_plus + "&&");
        String _retrieveFormula_1 = this.retrieveFormula(and.getRight());
        String _plus_2 = (_plus_1 + _retrieveFormula_1);
        return (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (expression instanceof LtlUntil) {
        _matched=true;
        LtlUntil until = ((LtlUntil) expression);
        String _retrieveFormula = this.retrieveFormula(until.getLeft());
        String _plus = ("(" + _retrieveFormula);
        String _plus_1 = (_plus + ")U(");
        String _retrieveFormula_1 = this.retrieveFormula(until.getRight());
        String _plus_2 = (_plus_1 + _retrieveFormula_1);
        return (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (expression instanceof LtlThen) {
        _matched=true;
        LtlThen then = ((LtlThen) expression);
        String _retrieveFormula = this.retrieveFormula(then.getLeft());
        String _plus = ("(" + _retrieveFormula);
        String _plus_1 = (_plus + ")->(");
        String _retrieveFormula_1 = this.retrieveFormula(then.getRight());
        String _plus_2 = (_plus_1 + _retrieveFormula_1);
        return (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (expression instanceof UnaryLtl) {
        _matched=true;
        UnaryLtl unary = ((UnaryLtl) expression);
        String _op = unary.getOp();
        if (_op != null) {
          switch (_op) {
            case "!":
              String _retrieveFormula = this.retrieveFormula(unary.getExpr());
              String _plus = ("!(" + _retrieveFormula);
              return (_plus + ")");
            case "next":
              String _retrieveFormula_1 = this.retrieveFormula(unary.getExpr());
              String _plus_1 = ("X(" + _retrieveFormula_1);
              return (_plus_1 + ")");
            case "always":
              String _retrieveFormula_2 = this.retrieveFormula(unary.getExpr());
              String _plus_2 = ("[](" + _retrieveFormula_2);
              return (_plus_2 + ")");
            case "eventually":
              String _retrieveFormula_3 = this.retrieveFormula(unary.getExpr());
              String _plus_3 = ("<>(" + _retrieveFormula_3);
              return (_plus_3 + ")");
          }
        }
      }
    }
    return null;
  }
  
  public void createReactionClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass reactions, final Map automatonsMap) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final Iterable<Rc> set = Iterables.<Rc>filter(reactions.getDeclarations(), Rc.class);
      final Iterable<JVarD> variables = Iterables.<JVarD>filter(reactions.getDeclarations(), JVarD.class);
      boolean _isEmpty = IterableExtensions.isEmpty(variables);
      boolean _not = (!_isEmpty);
      if (_not) {
        for (final JVarD variable : variables) {
          EList<JvmMember> _members = it.getMembers();
          final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
            it_1.setStatic(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(reactions, StringExtensions.toFirstLower(variable.getName()), variable.getType(), _function_1);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        }
      }
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("System.out.println(\"Formulae violated\");");
            _builder.newLine();
            _builder.append("//System.exit(0);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(reactions, "onViolation", this._typeReferenceBuilder.typeRef(void.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
      final Iterable<MSig> operations = Iterables.<MSig>filter(reactions.getDeclarations(), MSig.class);
      boolean _isEmpty_1 = IterableExtensions.isEmpty(operations);
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        for (final MSig method : operations) {
          EList<JvmMember> _members_2 = it.getMembers();
          String _firstLower = StringExtensions.toFirstLower(method.getName());
          JvmTypeReference _elvis = null;
          JvmTypeReference _type = method.getType();
          if (_type != null) {
            _elvis = _type;
          } else {
            JvmTypeReference _inferredType = this._jvmTypesBuilder.inferredType();
            _elvis = _inferredType;
          }
          final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            EList<XJJvmFormalParameter> _params = method.getParams();
            for (final XJJvmFormalParameter p : _params) {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(p, p.getName(), p.getParameterType());
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
            }
            this._jvmTypesBuilder.setBody(it_1, method.getBody());
          };
          JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(reactions, _firstLower, _elvis, _function_3);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
        }
      }
      final HashMap<String, String> after = new HashMap<String, String>();
      final HashMap<String, String> before = new HashMap<String, String>();
      for (final Rc rc : set) {
        {
          if (((rc.getAutomaton() == null) || (rc.getState() == null))) {
            return;
          }
          String _name = rc.getAutomaton().getName();
          String _plus = ("reaction" + _name);
          String _name_1 = rc.getState().getName();
          String name = (_plus + _name_1);
          EList<JvmMember> _members_3 = it.getMembers();
          final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            this._jvmTypesBuilder.setBody(it_1, rc.getBody().getBody());
          };
          JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(reactions, name, this._typeReferenceBuilder.typeRef(void.class), _function_4);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_2);
          Pos _pos = rc.getPos();
          boolean _equals = Objects.equal(_pos, Pos.BEFORE);
          if (_equals) {
            String _name_2 = rc.getAutomaton().getName();
            String _plus_1 = (_name_2 + ":");
            String _name_3 = rc.getState().getName();
            String _plus_2 = (_plus_1 + _name_3);
            before.put(_plus_2, (name + "()"));
          } else {
            Pos _pos_1 = rc.getPos();
            boolean _equals_1 = Objects.equal(_pos_1, Pos.AFTER);
            if (_equals_1) {
              String _name_4 = rc.getAutomaton().getName();
              String _plus_3 = (_name_4 + ":");
              String _name_5 = rc.getState().getName();
              String _plus_4 = (_plus_3 + _name_5);
              after.put(_plus_4, (name + "()"));
            }
          }
        }
      }
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(reactions, "automaton", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        it_1.setSynchronized(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              boolean _isEmpty = before.isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef);
                _builder.append(" actual = automaton.getCurrentState();");
                _builder.newLineIfNotEmpty();
                {
                  Set<String> _keySet = before.keySet();
                  for(final String state : _keySet) {
                    {
                      final Function1<Object, Automaton> _function = (Object a) -> {
                        return ((Automaton) a);
                      };
                      Iterable<Automaton> _map = IterableExtensions.<Object, Automaton>map(automatonsMap.keySet(), _function);
                      for(final Automaton automaton : _map) {
                        {
                          Object _get = automatonsMap.get(automaton);
                          boolean _contains = ((Set<String>) _get).contains(state);
                          if (_contains) {
                            _builder.append("if(co.edu.icesi.eketal.automaton.");
                            String _firstUpper = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper);
                            _builder.append(".class.isInstance(automaton)){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("if(actual.equals(co.edu.icesi.eketal.automaton.");
                            String _firstUpper_1 = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper_1, "\t");
                            _builder.append(".estados.get(\"");
                            String _get_1 = state.split(Pattern.quote(":"))[1];
                            _builder.append(_get_1, "\t");
                            _builder.append("\"))){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            String _get_2 = before.get(state);
                            _builder.append(_get_2, "\t\t");
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.newLine();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(reactions, "verifyBefore", this._typeReferenceBuilder.typeRef(void.class), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_2);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(reactions, "automaton", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              boolean _isEmpty = after.isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef);
                _builder.append(" actual = automaton.getCurrentState();");
                _builder.newLineIfNotEmpty();
                {
                  Set<String> _keySet = after.keySet();
                  for(final String state : _keySet) {
                    {
                      final Function1<Object, Automaton> _function = (Object a) -> {
                        return ((Automaton) a);
                      };
                      Iterable<Automaton> _map = IterableExtensions.<Object, Automaton>map(automatonsMap.keySet(), _function);
                      for(final Automaton automaton : _map) {
                        {
                          boolean _contains = automaton.getSteps().contains(state);
                          if (_contains) {
                            _builder.append("if(automaton.getClass().isAssignableFrom(co.edu.icesi.eketal.automaton.");
                            String _firstUpper = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper);
                            _builder.append(".class){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("if(actual.equals(co.edu.icesi.eketal.automaton.");
                            String _firstUpper_1 = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper_1, "\t");
                            _builder.append(".estados.get(\"");
                            String _get = state.split(Pattern.quote(":"))[1];
                            _builder.append(_get, "\t");
                            _builder.append("\"))){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            String _get_1 = after.get(state);
                            _builder.append(_get_1, "\t\t");
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(reactions, "verifyAfter", this._typeReferenceBuilder.typeRef(void.class), _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_3);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(reactions, ("co.edu.icesi.eketal.reaction." + EketalJvmModelInferrer.reaction)), _function);
  }
  
  /**
   * Also adds the Singleton nature
   */
  public void createHandlerClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass eventDefinitionClass, final Set<Automaton> machines, final Set<Ltl> buchis) {
    final Protocol protocol = eventDefinitionClass.getProtocol();
    InputOutput.<String>println(("protocol" + protocol));
    final String matchInterface = eventDefinitionClass.getInterface();
    InputOutput.<String>println(("interfaces" + matchInterface));
    final Function1<Automaton, Automaton> _function = (Automaton a) -> {
      return ((Automaton) a);
    };
    final Set<Automaton> automatons = IterableExtensions.<Automaton>toSet(IterableExtensions.<Automaton, Automaton>map(machines, _function));
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append("()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(eventDefinitionClass, "instance", this._typeReferenceBuilder.typeRef(it), _function_2);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(eventDefinitionClass, "brokerMessageHandler", this._typeReferenceBuilder.typeRef(BrokerMessageHandler.class), _function_3);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_2 = this._jvmTypesBuilder.toField(eventDefinitionClass, "eventBroker", this._typeReferenceBuilder.typeRef(EventBroker.class), _function_4);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmConstructor> _function_5 = (JvmConstructor it_1) -> {
        it_1.setVisibility(JvmVisibility.PRIVATE);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("brokerMessageHandler = new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public Object handle(");
            _builder.append(Event.class, "\t");
            _builder.append(" event, ");
            _builder.append(Map.class, "\t");
            _builder.append(" metadata, ");
            _builder.append(Message.class, "\t");
            _builder.append(" msg,");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    \t\t\t");
            _builder.append(int.class, "\t    \t\t\t");
            _builder.append(" typeOfMsgSent){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    ");
            _builder.append("if(event.getLocalization().equals(eventBroker.getAsyncAddress())){");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("Object handle = super.handle(event, metadata, msg, typeOfMsgSent);");
            _builder.newLine();
            {
              for(final Automaton nameAutomaton : automatons) {
                _builder.append("\t\t");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
                _builder.append(_typeRef_1, "\t\t");
                _builder.append(" automaton");
                String _firstUpper = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper, "\t\t");
                _builder.append(" = co.edu.icesi.eketal.automaton.");
                String _firstUpper_1 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_1, "\t\t");
                _builder.append(".getInstance();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("if(!automaton");
                String _firstUpper_2 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_2, "\t\t");
                _builder.append(".evaluate(event)){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
                _builder.append(_typeRef_2, "\t\t\t");
                _builder.append(".getLogger().info(\"[Handle] Event not recognized by the automaton: ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_3, "\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("//System.out.println(\"[Handle] Event not recognized by the automaton: ");
                String _firstUpper_4 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_4, "\t\t\t\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t");
                _builder.append("}else{");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
                _builder.append(_typeRef_3, "\t\t\t\t\t\t");
                _builder.append(".getLogger().info(\"[Handle] Recognized event \"+event+\" in ");
                String _name = nameAutomaton.getName();
                _builder.append(_name, "\t\t\t\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("//System.out.println(\"[Handle] Recognized event \"+event+\" by automaton ");
                String _name_1 = nameAutomaton.getName();
                _builder.append(_name_1, "\t\t\t\t\t\t");
                _builder.append("\");\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("co.edu.icesi.eketal.reaction.");
                _builder.append(EketalJvmModelInferrer.reaction, "\t\t\t\t\t\t");
                _builder.append(".verifyBefore(automaton");
                String _firstUpper_5 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_5, "\t\t\t\t\t\t");
                _builder.append(");\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("co.edu.icesi.eketal.reaction.");
                _builder.append(EketalJvmModelInferrer.reaction, "\t\t\t\t\t\t");
                _builder.append(".verifyAfter(automaton");
                String _firstUpper_6 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_6, "\t\t\t\t\t\t");
                _builder.append(");\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            {
              for(final Ltl buchi : buchis) {
                _builder.append("\t\t");
                JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
                _builder.append(_typeRef_4, "\t\t");
                _builder.append(" automaton");
                String _firstUpper_7 = StringExtensions.toFirstUpper(buchi.getName());
                _builder.append(_firstUpper_7, "\t\t");
                _builder.append(" = co.edu.icesi.eketal.buchiautomaton.");
                String _firstUpper_8 = StringExtensions.toFirstUpper(buchi.getName());
                _builder.append(_firstUpper_8, "\t\t");
                _builder.append(".getInstance();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("if(!automaton");
                String _firstUpper_9 = StringExtensions.toFirstUpper(buchi.getName());
                _builder.append(_firstUpper_9, "\t\t");
                _builder.append(".evaluate(event)){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("co.edu.icesi.eketal.reaction.");
                _builder.append(EketalJvmModelInferrer.reaction, "\t\t\t");
                _builder.append(".onViolation();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("}else{");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
                _builder.append(_typeRef_5, "\t\t\t");
                _builder.append(".getLogger().info(\"[Handle] Event respects the property ");
                String _name_2 = buchi.getName();
                _builder.append(_name_2, "\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return handle;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("};");
            _builder.newLine();
            {
              if ((((protocol == null) || Objects.equal(protocol, Protocol.UDP)) && (matchInterface == null))) {
                _builder.append("eventBroker = new ");
                JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(JGroupsEventBroker.class);
                _builder.append(_typeRef_6);
                _builder.append("(\"Eketal\", brokerMessageHandler, true);");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("eventBroker = new ");
                JvmTypeReference _typeRef_7 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(JGroupsEventBroker.class);
                _builder.append(_typeRef_7);
                _builder.append("(\"Eketal\", brokerMessageHandler, true, props);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(eventDefinitionClass, _function_5);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
      if ((((protocol != null) && (!Objects.equal(protocol, Protocol.UDP))) || (matchInterface != null))) {
        EList<JvmMember> _members_4 = it.getMembers();
        final Procedure1<JvmField> _function_6 = (JvmField it_1) -> {
          if (((protocol == null) || Objects.equal(protocol, Protocol.UDP))) {
            this._jvmTypesBuilder.setInitializer(it_1, this.generateUDP(matchInterface));
          } else {
            final TreeSet<String> ips = new TreeSet<String>();
            final Consumer<Group> _function_7 = (Group it_2) -> {
              final Consumer<Host> _function_8 = (Host g) -> {
                String _ip = g.getIp();
                boolean _notEquals = (!Objects.equal(_ip, "localhost"));
                if (_notEquals) {
                  String _ip_1 = g.getIp();
                  ips.add(_ip_1);
                }
              };
              it_2.getHosts().forEach(_function_8);
            };
            Iterables.<Group>filter(eventDefinitionClass.getDeclarations(), Group.class).forEach(_function_7);
            this._jvmTypesBuilder.setInitializer(it_1, this.generateTCP(matchInterface, protocol, ips));
          }
        };
        JvmField _field_3 = this._jvmTypesBuilder.toField(eventDefinitionClass, "props", this._typeReferenceBuilder.typeRef(String.class), _function_6);
        this._jvmTypesBuilder.<JvmField>operator_add(_members_4, _field_3);
      }
      EList<JvmMember> _members_5 = it.getMembers();
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(instance==null)");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("instance = new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("return instance;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getInstance", this._typeReferenceBuilder.typeRef(it), _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmOperation> _function_8 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "evento", this._typeReferenceBuilder.typeRef(Event.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "map", this._typeReferenceBuilder.typeRef(Map.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("eventBroker.multicast(evento, map);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "multicast", this._typeReferenceBuilder.typeRef(void.class), _function_8);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_1);
      EList<JvmMember> _members_7 = it.getMembers();
      final Procedure1<JvmOperation> _function_9 = (JvmOperation it_1) -> {
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(URL.class);
            _builder.append(" url = eventBroker.getAsyncAddress();");
            _builder.newLineIfNotEmpty();
            _builder.append("if(url!=null){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return url;");
            _builder.newLine();
            _builder.append("}else{");
            _builder.newLine();
            _builder.append("\t");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef, "\t");
            _builder.append(".getLogger().error(\"[Handle] Could not obtain JGroups ip Address for the async monitor\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("try{");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return new ");
            _builder.append(URL.class, "\t\t");
            _builder.append("(\"http:127.0.0.1\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}catch(");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(MalformedURLException.class);
            _builder.append(_typeRef_1, "\t");
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef_2, "\t\t");
            _builder.append(".getLogger().error(\"[Handle] \"+e.getMessage());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getAsyncAddress", this._typeReferenceBuilder.typeRef(URL.class), _function_9);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_7, _method_2);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(eventDefinitionClass, ("co.edu.icesi.eketal.handlercontrol." + EketalJvmModelInferrer.handlerClassName)), _function_1);
  }
  
  public StringConcatenationClient generateTCP(final String bindInterface, final Protocol protocol, final TreeSet<String> ips) {
    final TreeSet<String> processedIps = this.processIps(ips);
    StringConcatenationClient _client = new StringConcatenationClient() {
      @Override
      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
        {
          boolean _equals = Objects.equal(protocol, Protocol.TCP);
          if (_equals) {
            _builder.append("\"TCP(bind_port=7800;\"+");
            _builder.newLine();
          } else {
            boolean _equals_1 = Objects.equal(protocol, Protocol.TCP_NIO2);
            if (_equals_1) {
              _builder.append("\"TCP_NIO2(bind_port=7800;\"+");
              _builder.newLine();
            }
          }
        }
        _builder.newLine();
        {
          if ((bindInterface != null)) {
            _builder.append("\"bind_addr=match-interface:");
            _builder.append(bindInterface);
            _builder.append(";\"+");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("\"recv_buf_size=${tcp.recv_buf_size:130k};\"+");
        _builder.newLine();
        _builder.append("\"send_buf_size=${tcp.send_buf_size:130k};\"+");
        _builder.newLine();
        _builder.append("\"max_bundle_size=64K;\"+");
        _builder.newLine();
        _builder.append("\"sock_conn_timeout=300):\"+");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\"TCPPING(async_discovery=true;\"+");
        _builder.newLine();
        _builder.append("\"initial_hosts=${jgroups.tcpping.initial_hosts:");
        final Function1<String, CharSequence> _function = (String ip) -> {
          return (ip + "[7800]");
        };
        String _join = IterableExtensions.<String>join(processedIps, ",", _function);
        _builder.append(_join);
        _builder.append("};\"+");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          boolean _equals_2 = Objects.equal(protocol, Protocol.TCP);
          if (_equals_2) {
            _builder.append("\"port_range=2):\"+");
            _builder.newLine();
          } else {
            boolean _equals_3 = Objects.equal(protocol, Protocol.TCP_NIO2);
            if (_equals_3) {
              _builder.append("\"port_range=3):\"+");
              _builder.newLine();
            }
          }
        }
        _builder.append("\"MERGE3(min_interval=10000;max_interval=30000):\" +");
        _builder.newLine();
        _builder.append("\"FD_SOCK():\" +");
        _builder.newLine();
        {
          boolean _equals_4 = Objects.equal(protocol, Protocol.TCP);
          if (_equals_4) {
            _builder.append("\"FD(timeout=12000):\" +");
            _builder.newLine();
          } else {
            boolean _equals_5 = Objects.equal(protocol, Protocol.TCP_NIO2);
            if (_equals_5) {
              _builder.append("\"FD_ALL(timeout=12000;max_tries=3):\" +");
              _builder.newLine();
            }
          }
        }
        _builder.newLine();
        _builder.append("\"VERIFY_SUSPECT(timeout=2000):\" +");
        _builder.newLine();
        _builder.append("\"BARRIER():\" +");
        _builder.newLine();
        _builder.append("\t\t  \t");
        _builder.append("\"pbcast.NAKACK2(use_mcast_xmit=false;discard_delivered_msgs=true):\" +");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("\"UNICAST3():\"+");
        _builder.newLine();
        _builder.append("\"pbcast.STABLE(stability_delay=2000;desired_avg_gossip=50000;max_bytes=4M):\" +");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("\"pbcast.GMS(join_timeout=10000;print_local_addr=true;view_bundling=true):\"+");
        _builder.newLine();
        _builder.append("\"MFC(max_credits=4M;min_threshold=0.4):\"+");
        _builder.newLine();
        _builder.append("\"FRAG2(frag_size=60k):\" +");
        _builder.newLine();
        _builder.append("\"pbcast.STATE_TRANSFER()\"");
        _builder.newLine();
      }
    };
    return _client;
  }
  
  public TreeSet<String> processIps(final TreeSet<String> set) {
    final TreeSet<String> retorno = new TreeSet<String>();
    final Consumer<String> _function = (String ip) -> {
      boolean _contains = ip.contains("[");
      if (_contains) {
        String[] splitIp = ip.split(Pattern.quote("["));
        int _length = splitIp[1].length();
        int _minus = (_length - 1);
        String[] limits = splitIp[1].substring(0, _minus).split(Pattern.quote("-"));
        for (int i = Integer.parseInt(limits[0]); (i <= Integer.parseInt(limits[1])); i++) {
          String _get = splitIp[0];
          String _plus = (_get + Integer.valueOf(i));
          retorno.add(_plus);
        }
      } else {
        boolean _contains_1 = ip.contains("*");
        if (_contains_1) {
        } else {
          retorno.add(ip);
        }
      }
    };
    set.forEach(_function);
    return retorno;
  }
  
  public StringConcatenationClient generateUDP(final String bindInterface) {
    StringConcatenationClient _client = new StringConcatenationClient() {
      @Override
      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
        _builder.append("\"UDP(mcast_port=${jgroups.udp.mcast_port:45588};\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"bind_addr=match-interface:");
        _builder.append(bindInterface, "\t");
        _builder.append(";\"+");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"tos=8;\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"ucast_recv_buf_size=210K;\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"ucast_send_buf_size=210K;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"mcast_recv_buf_size=210K;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"mcast_send_buf_size=210K;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"max_bundle_size=64K;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"max_bundle_timeout=30;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"enable_diagnostics=true;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_naming_pattern=cl;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"logical_addr_cache_max_size=1000;\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"timer_type=new3;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"timer.min_threads=2;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"timer.max_threads=4;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"timer.keep_alive_time=3000;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"timer.queue_max_size=500;\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"timer.rejection_policy=abort;\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.enabled=true;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.min_threads=10;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.max_threads=80;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.keep_alive_time=5000;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.queue_enabled=true;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.queue_max_size=50000;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"thread_pool.rejection_policy=discard;\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"oob_thread_pool.enabled=true;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"oob_thread_pool.min_threads=5;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"oob_thread_pool.max_threads=80;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"oob_thread_pool.keep_alive_time=5000;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"oob_thread_pool.rejection_policy=discard):\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"PING(break_on_coord_rsp=true):\" +");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"MERGE3(min_interval=10000;max_interval=30000):\" +");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"FD_SOCK():\" +");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"FD_ALL(timeout=12000):\" +");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"VERIFY_SUSPECT(timeout=2000):\" +");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"BARRIER():\" +");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("  \t");
        _builder.append("\"pbcast.NAKACK2(use_mcast_xmit=true;xmit_interval=500;xmit_table_num_rows=100;xmit_table_msgs_per_row=2000;\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"xmit_table_max_compaction_time=35000;max_msg_batch_size=500;discard_delivered_msgs=true):\" +");
        _builder.newLine();
        _builder.append("\t\t\t   ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"UNICAST3(xmit_interval=500;xmit_table_num_rows=100;xmit_table_msgs_per_row=2000;\"+");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"xmit_table_max_compaction_time=60000;max_msg_batch_size=500):\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"pbcast.STABLE(stability_delay=2000;desired_avg_gossip=50000;max_bytes=4M):\" +");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"pbcast.GMS(join_timeout=10000;print_local_addr=true;view_bundling=true,merge_timeout=7000,max_bundling_time=1000,resume_task_timeout=15000):\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"UFC(max_credits=4M;min_threshold=0.4):\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"MFC(max_credits=4M;min_threshold=0.4):\"+");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"FRAG2(frag_size=60k):\" +");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"RSVP(resend_interval=2000;timeout=10000):\"+");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//\"pbcast.GMS(join_timeout=5000;print_local_addr=true;view_bundling=true):Causal(causal_order_prot_interest=false)\";");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"pbcast.STATE_TRANSFER()\"");
        _builder.newLine();
      }
    };
    return _client;
  }
  
  public void createGroupClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass claseGrupos) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final TreeSet<String> grupos = new TreeSet<String>();
      final Consumer<Group> _function_1 = (Group it_1) -> {
        final TreeSet<String> hosts = new TreeSet<String>();
        final Consumer<Host> _function_2 = (Host host) -> {
          hosts.add(host.getIp());
        };
        it_1.getHosts().forEach(_function_2);
        String _name = it_1.getName();
        String _plus = ("\"" + _name);
        String _plus_1 = (_plus + ":[");
        String _join = IterableExtensions.join(this.processIps(hosts), ",");
        String _plus_2 = (_plus_1 + _join);
        String _plus_3 = (_plus_2 + "]\"");
        grupos.add(_plus_3);
      };
      Iterables.<Group>filter(claseGrupos.getDeclarations(), Group.class).forEach(_function_1);
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("{");
            String _join = IterableExtensions.join(grupos, ",");
            _builder.append(_join);
            _builder.append("}");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(claseGrupos, "SET_VALUES", this._typeReferenceBuilder.typeRef("java.lang.String[]"), _function_2);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("initializeGroups()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(claseGrupos, "grupos", this._typeReferenceBuilder.typeRef(Map.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(URL.class))), _function_3);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(Map.class);
            _builder.append(" retorno = ");
            _builder.append(Collections.class);
            _builder.append(".synchronizedMap(new ");
            _builder.append(Hashtable.class);
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("for(");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef);
            _builder.append(" s : SET_VALUES){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef_1, "\t");
            _builder.append("[] keyValue = s.replace(\"]\",\"\").split(");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Pattern.class);
            _builder.append(_typeRef_2, "\t");
            _builder.append(".quote(\":[\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class));
            _builder.append(_typeRef_3, "\t");
            _builder.append(" values = new ");
            JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
            _builder.append(_typeRef_4, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("for(");
            JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef_5, "\t");
            _builder.append(" ip : keyValue[1].split(\",\")){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("try{");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("if(ip.equals(\"localhost\")){");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t\t\t\t");
            _builder.append(" local = co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t\t\t\t");
            _builder.append(".getInstance();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("values.add(new ");
            JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_6, "\t\t\t\t");
            _builder.append("(\"http://\"+local.getAsyncAddress().getHost()));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}else{");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("values.add(new ");
            JvmTypeReference _typeRef_7 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_7, "\t\t\t\t");
            _builder.append("(\"http://\"+ip));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}catch(");
            JvmTypeReference _typeRef_8 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Exception.class);
            _builder.append(_typeRef_8, "\t\t");
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno.put(keyValue[0],values);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("return retorno;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(claseGrupos, "initializeGroups", this._typeReferenceBuilder.typeRef(Map.class), _function_4);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmConstructor> _function_5 = (JvmConstructor it_1) -> {
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(claseGrupos, _function_5);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "newGrupo", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(claseGrupos, "hosts", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(URL.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("grupos.put(newGrupo, hosts);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(claseGrupos, "addGroup", this._typeReferenceBuilder.typeRef(void.class), _function_6);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_1);
      EList<JvmMember> _members_5 = it.getMembers();
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupoEliminar", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return grupos.remove(grupoEliminar)!=null;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(claseGrupos, "removeGroup", this._typeReferenceBuilder.typeRef(Boolean.class), _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_2);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmOperation> _function_8 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupo", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return true;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(claseGrupos, "on", this._typeReferenceBuilder.typeRef(boolean.class), _function_8);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_3);
      EList<JvmMember> _members_7 = it.getMembers();
      final Procedure1<JvmOperation> _function_9 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "nombreGrupo", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(grupos==null){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append(" local = co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append(".getInstance();");
            _builder.newLineIfNotEmpty();
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef);
            _builder.append(" url = local.getAsyncAddress();");
            _builder.newLineIfNotEmpty();
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(boolean.class);
            _builder.append(_typeRef_1);
            _builder.append(" retorno = false;");
            _builder.newLineIfNotEmpty();
            _builder.append("try{\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno = grupos.get(nombreGrupo).contains(new ");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_2, "\t");
            _builder.append("(\"http://\"+url.getHost()));");
            _builder.newLineIfNotEmpty();
            _builder.append("}catch(");
            JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Exception.class);
            _builder.append(_typeRef_3);
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno = false;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("return retorno;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(claseGrupos, "host", this._typeReferenceBuilder.typeRef(boolean.class), _function_9);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_7, _method_4);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(claseGrupos, ("co.edu.icesi.eketal.groupsimpl." + EketalJvmModelInferrer.groupClassName)), _function);
  }
  
  public JvmOperation AutomatonInit(final Automaton declaracion) {
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "transitionSet", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(Transition.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      EList<JvmFormalParameter> _parameters_1 = it.getParameters();
      JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(declaracion, "estadosFinales", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
      EList<JvmFormalParameter> _parameters_2 = it.getParameters();
      JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(declaracion, "expressions", 
        this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
      it.setStatic(true);
      it.setVisibility(JvmVisibility.PRIVATE);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("//Relaci√≥n evento caracter");
          _builder.newLine();
          JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Map.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
          _builder.append(_typeRef);
          _builder.append(" mapping = new ");
          JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(TreeMap.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
          _builder.append(_typeRef_1);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Estado inicial");
          _builder.newLine();
          JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
          _builder.append(_typeRef_2);
          _builder.append(" inicial = null;");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("int consecutivo = 65;");
          _builder.newLine();
          _builder.append(Character.class);
          _builder.append(" caracter = (char)consecutivo;");
          _builder.newLineIfNotEmpty();
          _builder.append(String.class);
          _builder.append(" nombreEvento = \"\";");
          _builder.newLineIfNotEmpty();
          _builder.append(String.class);
          _builder.append(" estadoLlegada = \"\";");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          {
            EList<Step> _steps = declaracion.getSteps();
            for(final Step step : _steps) {
              _builder.append("//Definici√≥n del estado: ");
              String _name = step.getName();
              _builder.append(_name);
              _builder.newLineIfNotEmpty();
              _builder.append("String estado");
              String _firstUpper = StringExtensions.toFirstUpper(step.getName());
              _builder.append(_firstUpper);
              _builder.append(" = \"");
              String _name_1 = step.getName();
              _builder.append(_name_1);
              _builder.append("\";");
              _builder.newLineIfNotEmpty();
              _builder.append("estados.put(estado");
              String _firstUpper_1 = StringExtensions.toFirstUpper(step.getName());
              _builder.append(_firstUpper_1);
              _builder.append(", new ");
              JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
              _builder.append(_typeRef_3);
              _builder.append("());");
              _builder.newLineIfNotEmpty();
              {
                if (((step.getType() != null) && Objects.equal(step.getType(), StateType.START))) {
                  _builder.append("//");
                  StateType _type = step.getType();
                  _builder.append(_type);
                  _builder.append(" ");
                  _builder.append(StateType.START);
                  _builder.append(" ");
                  _builder.append(StateType.START_VALUE);
                  _builder.newLineIfNotEmpty();
                  _builder.append("//Estado inicial: ");
                  String _name_2 = step.getName();
                  _builder.append(_name_2);
                  _builder.newLineIfNotEmpty();
                  _builder.append("inicial = estados.get(estado");
                  String _firstUpper_2 = StringExtensions.toFirstUpper(step.getName());
                  _builder.append(_firstUpper_2);
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Step> _steps_1 = declaracion.getSteps();
            for(final Step step_1 : _steps_1) {
              {
                boolean _isEmpty = step_1.getTransitions().isEmpty();
                boolean _not = (!_isEmpty);
                if (_not) {
                  {
                    EList<TransDef> _transitions = step_1.getTransitions();
                    for(final TransDef transition : _transitions) {
                      _builder.append("//Transicion de ");
                      String _name_3 = transition.getEvent().getName();
                      _builder.append(_name_3);
                      _builder.append(" -> ");
                      String _name_4 = transition.getTarget().getName();
                      _builder.append(_name_4);
                      _builder.newLineIfNotEmpty();
                      _builder.append("estadoLlegada = \"");
                      String _name_5 = transition.getTarget().getName();
                      _builder.append(_name_5);
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!estados.containsKey(estadoLlegada)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("estados.put(estado");
                      String _firstUpper_3 = StringExtensions.toFirstUpper(step_1.getName());
                      _builder.append(_firstUpper_3, "\t");
                      _builder.append(", new ");
                      JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                      _builder.append(_typeRef_4, "\t");
                      _builder.append("());");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("caracter = (char)consecutivo;");
                      _builder.newLine();
                      _builder.append("consecutivo++;");
                      _builder.newLine();
                      _builder.append("nombreEvento = \"");
                      String _name_6 = transition.getEvent().getName();
                      _builder.append(_name_6);
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!mapping.containsKey(nombreEvento)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("mapping.put(nombreEvento, caracter);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("expressions.put(new ");
                      JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(DefaultEqualsExpression.class);
                      _builder.append(_typeRef_5, "\t");
                      _builder.append("(new ");
                      JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(NamedEvent.class);
                      _builder.append(_typeRef_6, "\t");
                      _builder.append("(nombreEvento)), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      JvmTypeReference _typeRef_7 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_7);
                      _builder.append(" ");
                      String _name_7 = step_1.getName();
                      _builder.append(_name_7);
                      String _firstUpper_4 = StringExtensions.toFirstUpper(transition.getEvent().getName());
                      _builder.append(_firstUpper_4);
                      _builder.append(" = new ");
                      JvmTypeReference _typeRef_8 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_8);
                      _builder.append("(estados.get(estado");
                      String _firstUpper_5 = StringExtensions.toFirstUpper(step_1.getName());
                      _builder.append(_firstUpper_5);
                      _builder.append("), estados.get(estadoLlegada), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("transitionSet.add(");
                      String _name_8 = step_1.getName();
                      _builder.append(_name_8);
                      String _firstUpper_6 = StringExtensions.toFirstUpper(transition.getEvent().getName());
                      _builder.append(_firstUpper_6);
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.newLine();
                    }
                  }
                }
              }
              {
                StateType _type_1 = step_1.getType();
                boolean _equals = Objects.equal(_type_1, StateType.END);
                if (_equals) {
                  _builder.append("//Estado final ");
                  String _firstUpper_7 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_7);
                  _builder.newLineIfNotEmpty();
                  _builder.append("estados.get(estado");
                  String _firstUpper_8 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_8);
                  _builder.append(").setAccept(true);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("estadosFinales.add(estados.get(estado");
                  String _firstUpper_9 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_9);
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                  _builder.newLine();
                }
              }
            }
          }
          _builder.append("return inicial;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    final JvmOperation method = this._jvmTypesBuilder.toMethod(declaracion, "initialize", this._typeReferenceBuilder.typeRef(State.class), _function);
    return method;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Model) {
      _infer((Model)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}

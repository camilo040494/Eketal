/**
 * generated by Xtext 2.9.2
 */
package co.edu.icesi.eketal.jvmmodel;

import co.edu.icesi.eketal.eketal.Automaton;
import co.edu.icesi.eketal.eketal.EventClass;
import co.edu.icesi.eketal.eketal.Group;
import co.edu.icesi.eketal.eketal.Host;
import co.edu.icesi.eketal.eketal.JVarD;
import co.edu.icesi.eketal.eketal.Model;
import co.edu.icesi.eketal.eketal.Pos;
import co.edu.icesi.eketal.eketal.Rc;
import co.edu.icesi.eketal.eketal.StateType;
import co.edu.icesi.eketal.eketal.Step;
import co.edu.icesi.eketal.eketal.TransDef;
import co.edu.icesi.eketal.outputconfiguration.OutputConfigurationAdapter;
import co.edu.icesi.ketal.core.DefaultEqualsExpression;
import co.edu.icesi.ketal.core.Event;
import co.edu.icesi.ketal.core.Expression;
import co.edu.icesi.ketal.core.NamedEvent;
import co.edu.icesi.ketal.core.State;
import co.edu.icesi.ketal.core.Transition;
import co.edu.icesi.ketal.distribution.BrokerMessageHandler;
import co.edu.icesi.ketal.distribution.EventBroker;
import co.edu.icesi.ketal.distribution.ReceiverMessageHandler;
import co.edu.icesi.ketal.distribution.transports.jgroups.JGroupsEventBroker;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.jgroups.Message;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class EketalJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  public static String groupClassName = "_GroupsControl";
  
  public static String handlerClassName = "_EventHandler";
  
  public static String reaction = "_Reaction";
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Model element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final JvmGenericType implementation = this._jvmTypesBuilder.toClass(element, this._iQualifiedNameProvider.getFullyQualifiedName(element));
    boolean _equals = Objects.equal(implementation, null);
    if (_equals) {
      return;
    }
    EventClass eventClass = element.getTypeDeclaration();
    JvmGenericType eventClassGenerate = this._jvmTypesBuilder.toClass(eventClass, this._iQualifiedNameProvider.getFullyQualifiedName(eventClass));
    EList<Adapter> _eAdapters = eventClassGenerate.eAdapters();
    OutputConfigurationAdapter _outputConfigurationAdapter = new OutputConfigurationAdapter(IFileSystemAccess.DEFAULT_OUTPUT);
    _eAdapters.add(_outputConfigurationAdapter);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      InputOutput.<String>println("l√≠nea 97 Inferrer");
    };
    acceptor.<JvmGenericType>accept(eventClassGenerate, _function);
    final EventClass groupsClass = element.getTypeDeclaration();
    this.createGroupClass(acceptor, groupsClass);
    Iterable<Automaton> automatons = Iterables.<Automaton>filter(element.getTypeDeclaration().getDeclarations(), Automaton.class);
    final Function1<Automaton, Set<String>> _function_1 = (Automaton a) -> {
      final Set<String> steps = new TreeSet<String>();
      final Function1<Step, Boolean> _function_2 = (Step s) -> {
        return Boolean.valueOf(steps.add(s.getName()));
      };
      IterableExtensions.<Step>forall(a.getSteps(), _function_2);
      return steps;
    };
    final Map<Automaton, Set<String>> eventsOfAutomaton = IterableExtensions.<Automaton, Set<String>>toInvertedMap(automatons, _function_1);
    String nameAutomaton = null;
    for (final Automaton declaracion : automatons) {
      {
        String _firstUpper = StringExtensions.toFirstUpper(declaracion.getName());
        String _plus = ("co.edu.icesi.eketal.automaton." + _firstUpper);
        nameAutomaton = _plus;
        final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
          final JvmTypeReference typeAutomaton = this._typeReferenceBuilder.typeRef(it);
          EList<JvmTypeReference> _superTypes = it.getSuperTypes();
          JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
          this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
          EList<JvmMember> _members = it.getMembers();
          final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
            it_1.setStatic(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(declaracion, "instance", typeAutomaton, _function_3);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
          EList<JvmMember> _members_1 = it.getMembers();
          final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
            it_1.setStatic(true);
            it_1.setVisibility(JvmVisibility.PUBLIC);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("new ");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashMap.class);
                _builder.append(_typeRef);
                _builder.append("<String, ");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef_1);
                _builder.append(">()");
              }
            };
            this._jvmTypesBuilder.setInitializer(it_1, _client);
          };
          JvmField _field_1 = this._jvmTypesBuilder.toField(declaracion, "estados", this._typeReferenceBuilder.typeRef(HashMap.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(State.class)), _function_4);
          this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
          EList<JvmMember> _members_2 = it.getMembers();
          final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("if(instance==null){");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("//lista de estados finales");
                _builder.newLine();
                _builder.append("\t");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class));
                _builder.append(_typeRef, "\t");
                _builder.append(" estadosFinales = new ");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                _builder.append(_typeRef_1, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//conjunto de transiciones");
                _builder.newLine();
                _builder.append("   \t");
                JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class));
                _builder.append(_typeRef_2, "   \t");
                _builder.append(" transitionSet = new ");
                JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
                _builder.append(_typeRef_3, "   \t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("//map de expresiones con caracteres");
                _builder.newLine();
                _builder.append("   \t");
                JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Expression.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
                _builder.append(_typeRef_4, "   \t");
                _builder.append(" expressions = new ");
                JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Hashtable.class);
                _builder.append(_typeRef_5, "   \t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t");
                JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef_6, "   \t");
                _builder.append(" initial = initialize(transitionSet, estadosFinales, expressions);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("return new ");
                _builder.append(typeAutomaton, "\t");
                _builder.append("(transitionSet, initial, estadosFinales, expressions);");
                _builder.newLineIfNotEmpty();
                _builder.append("}else{");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("return instance;\t\t\t\t\t\t");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(declaracion, "getInstance", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class), _function_5);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
          EList<JvmMember> _members_3 = it.getMembers();
          final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "event", this._typeReferenceBuilder.typeRef(Event.class));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("if(event instanceof ");
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(NamedEvent.class);
                _builder.append(_typeRef);
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t");
                _builder.append("return super.evaluate(event);");
                _builder.newLine();
                _builder.append("   \t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("   \t\t");
                _builder.append("return false;");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(declaracion, "evaluate", this._typeReferenceBuilder.typeRef(boolean.class), _function_6);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_3, _method_1);
          EList<JvmMember> _members_4 = it.getMembers();
          final Procedure1<JvmConstructor> _function_7 = (JvmConstructor it_1) -> {
            it_1.setVisibility(JvmVisibility.PRIVATE);
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "transitions", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(Transition.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
            EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
            JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(declaracion, "begin", this._typeReferenceBuilder.typeRef(State.class));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
            EList<JvmFormalParameter> _parameters_2 = it_1.getParameters();
            JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(declaracion, "finalStates", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
            EList<JvmFormalParameter> _parameters_3 = it_1.getParameters();
            JvmFormalParameter _parameter_3 = this._jvmTypesBuilder.toParameter(declaracion, "expressions", 
              this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_3, _parameter_3);
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("super(transitions, begin, finalStates, expressions);");
                _builder.newLine();
                _builder.append("initializeAutomaton();");
                _builder.newLine();
              }
            };
            this._jvmTypesBuilder.setBody(it_1, _client);
          };
          JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(declaracion, _function_7);
          this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_4, _constructor);
          EList<JvmMember> _members_5 = it.getMembers();
          JvmOperation _AutomatonInit = this.AutomatonInit(((Automaton) declaracion));
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _AutomatonInit);
        };
        acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(declaracion, nameAutomaton), _function_2);
      }
    }
    EventClass reactions = element.getTypeDeclaration();
    this.createReactionClass(acceptor, reactions, eventsOfAutomaton);
    final EventClass handlerClass = element.getTypeDeclaration();
    this.createHandlerClass(acceptor, handlerClass, IterableExtensions.<Automaton>toSet(automatons));
  }
  
  public void createReactionClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass reactions, final Map automatonsMap) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final Iterable<Rc> set = Iterables.<Rc>filter(reactions.getDeclarations(), Rc.class);
      final Iterable<JVarD> variables = Iterables.<JVarD>filter(reactions.getDeclarations(), JVarD.class);
      boolean _isEmpty = IterableExtensions.isEmpty(variables);
      boolean _not = (!_isEmpty);
      if (_not) {
        for (final JVarD variable : variables) {
          EList<JvmMember> _members = it.getMembers();
          final Procedure1<JvmField> _function_1 = (JvmField it_1) -> {
            it_1.setStatic(true);
          };
          JvmField _field = this._jvmTypesBuilder.toField(reactions, StringExtensions.toFirstLower(variable.getName()), variable.getType(), _function_1);
          this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
        }
      }
      final HashMap<String, String> after = new HashMap<String, String>();
      final HashMap<String, String> before = new HashMap<String, String>();
      for (final Rc rc : set) {
        {
          if ((Objects.equal(rc.getAutomaton(), null) || Objects.equal(rc.getState(), null))) {
            return;
          }
          String _name = rc.getAutomaton().getName();
          String _plus = ("reaction" + _name);
          String _name_1 = rc.getState().getName();
          String name = (_plus + _name_1);
          EList<JvmMember> _members_1 = it.getMembers();
          final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
            it_1.setStatic(true);
            this._jvmTypesBuilder.setBody(it_1, rc.getBody().getBody());
          };
          JvmOperation _method = this._jvmTypesBuilder.toMethod(reactions, name, this._typeReferenceBuilder.typeRef(void.class), _function_2);
          this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
          Pos _pos = rc.getPos();
          boolean _equals = Objects.equal(_pos, Pos.BEFORE);
          if (_equals) {
            before.put(rc.getState().getName(), (name + "()"));
          } else {
            Pos _pos_1 = rc.getPos();
            boolean _equals_1 = Objects.equal(_pos_1, Pos.AFTER);
            if (_equals_1) {
              after.put(rc.getState().getName(), (name + "()"));
            }
          }
        }
      }
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(reactions, "automaton", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              boolean _isEmpty = before.isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef);
                _builder.append(" actual = automaton.getCurrentState();");
                _builder.newLineIfNotEmpty();
                {
                  Set<String> _keySet = before.keySet();
                  for(final String state : _keySet) {
                    {
                      final Function1<Object, Automaton> _function = (Object a) -> {
                        return ((Automaton) a);
                      };
                      Iterable<Automaton> _map = IterableExtensions.<Object, Automaton>map(automatonsMap.keySet(), _function);
                      for(final Automaton automaton : _map) {
                        {
                          Object _get = automatonsMap.get(automaton);
                          boolean _contains = ((Set<String>) _get).contains(state);
                          if (_contains) {
                            _builder.append("if(co.edu.icesi.eketal.automaton.");
                            String _firstUpper = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper);
                            _builder.append(".class.isInstance(automaton)){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("if(actual.equals(co.edu.icesi.eketal.automaton.");
                            String _firstUpper_1 = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper_1, "\t");
                            _builder.append(".estados.get(\"");
                            _builder.append(state, "\t");
                            _builder.append("\"))){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            String _get_1 = before.get(state);
                            _builder.append(_get_1, "\t\t");
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.newLine();
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(reactions, "verifyBefore", this._typeReferenceBuilder.typeRef(void.class), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(reactions, "automaton", this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            {
              boolean _isEmpty = after.isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                _builder.append(_typeRef);
                _builder.append(" actual = automaton.getCurrentState();");
                _builder.newLineIfNotEmpty();
                {
                  Set<String> _keySet = after.keySet();
                  for(final String state : _keySet) {
                    {
                      final Function1<Object, Automaton> _function = (Object a) -> {
                        return ((Automaton) a);
                      };
                      Iterable<Automaton> _map = IterableExtensions.<Object, Automaton>map(automatonsMap.keySet(), _function);
                      for(final Automaton automaton : _map) {
                        {
                          boolean _contains = automaton.getSteps().contains(state);
                          if (_contains) {
                            _builder.append("if(automaton.getClass().isAssignableFrom(co.edu.icesi.eketal.automaton.");
                            String _firstUpper = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper);
                            _builder.append(".class){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("if(actual.equals(co.edu.icesi.eketal.automaton.");
                            String _firstUpper_1 = StringExtensions.toFirstUpper(automaton.getName());
                            _builder.append(_firstUpper_1, "\t");
                            _builder.append(".estados.get(\"");
                            _builder.append(state, "\t");
                            _builder.append("\"))){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            String _get = after.get(state);
                            _builder.append(_get, "\t\t");
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(reactions, "verifyAfter", this._typeReferenceBuilder.typeRef(void.class), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method_1);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(reactions, ("co.edu.icesi.eketal.reaction." + EketalJvmModelInferrer.reaction)), _function);
  }
  
  /**
   * Also adds the Singleton nature
   */
  public void createHandlerClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass eventDefinitionClass, final Set machines) {
    final Function1<Object, Automaton> _function = (Object a) -> {
      return ((Automaton) a);
    };
    final Set<Automaton> automatons = IterableExtensions.<Automaton>toSet(IterableExtensions.<Object, Automaton>map(machines, _function));
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmField> _function_2 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append("()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field = this._jvmTypesBuilder.toField(eventDefinitionClass, "instance", this._typeReferenceBuilder.typeRef(it), _function_2);
      this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(eventDefinitionClass, "brokerMessageHandler", this._typeReferenceBuilder.typeRef(BrokerMessageHandler.class), _function_3);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
        it_1.setStatic(true);
      };
      JvmField _field_2 = this._jvmTypesBuilder.toField(eventDefinitionClass, "eventBroker", this._typeReferenceBuilder.typeRef(EventBroker.class), _function_4);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_2, _field_2);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmConstructor> _function_5 = (JvmConstructor it_1) -> {
        it_1.setVisibility(JvmVisibility.PRIVATE);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("brokerMessageHandler = new ");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef);
            _builder.append("(){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public Object handle(");
            _builder.append(Event.class, "\t");
            _builder.append(" event, ");
            _builder.append(Map.class, "\t");
            _builder.append(" metadata, ");
            _builder.append(Message.class, "\t");
            _builder.append(" msg,");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    \t\t\t");
            _builder.append(int.class, "\t    \t\t\t");
            _builder.append(" typeOfMsgSent){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    ");
            _builder.append("if(event.getLocalization().equals(eventBroker.getAsyncAddress())){");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t    ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("Object handle = super.handle(event, metadata, msg, typeOfMsgSent);");
            _builder.newLine();
            {
              for(final Automaton nameAutomaton : automatons) {
                _builder.append("\t\t");
                JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(co.edu.icesi.ketal.core.Automaton.class);
                _builder.append(_typeRef_1, "\t\t");
                _builder.append(" automaton");
                String _firstUpper = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper, "\t\t");
                _builder.append(" = co.edu.icesi.eketal.automaton.");
                String _firstUpper_1 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_1, "\t\t");
                _builder.append(".getInstance();");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("if(!automaton");
                String _firstUpper_2 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_2, "\t\t");
                _builder.append(".evaluate(event)){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
                _builder.append(_typeRef_2, "\t\t\t");
                _builder.append(".getLogger().info(\"[Handle] Event not recognized by the automaton: ");
                String _firstUpper_3 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_3, "\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("//System.out.println(\"[Handle] Event not recognized by the automaton: ");
                String _firstUpper_4 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_4, "\t\t\t\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t");
                _builder.append("}else{");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
                _builder.append(_typeRef_3, "\t\t\t\t\t\t");
                _builder.append(".getLogger().info(\"[Handle] Recognized event \"+event+\" in ");
                String _name = nameAutomaton.getName();
                _builder.append(_name, "\t\t\t\t\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("//System.out.println(\"[Handle] Recognized event \"+event+\" by automaton ");
                String _name_1 = nameAutomaton.getName();
                _builder.append(_name_1, "\t\t\t\t\t\t");
                _builder.append("\");\t\t\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("co.edu.icesi.eketal.reaction.");
                _builder.append(EketalJvmModelInferrer.reaction, "\t\t\t\t\t\t");
                _builder.append(".verifyBefore(automaton");
                String _firstUpper_5 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_5, "\t\t\t\t\t\t");
                _builder.append(");\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t\t");
                _builder.append("co.edu.icesi.eketal.reaction.");
                _builder.append(EketalJvmModelInferrer.reaction, "\t\t\t\t\t\t");
                _builder.append(".verifyAfter(automaton");
                String _firstUpper_6 = StringExtensions.toFirstUpper(nameAutomaton.getName());
                _builder.append(_firstUpper_6, "\t\t\t\t\t\t");
                _builder.append(");\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.append("return handle;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("};");
            _builder.newLine();
            _builder.append("eventBroker = new ");
            JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(JGroupsEventBroker.class);
            _builder.append(_typeRef_4);
            _builder.append("(\"Eketal\", brokerMessageHandler, true);");
            _builder.newLineIfNotEmpty();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(eventDefinitionClass, _function_5);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmOperation> _function_6 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(instance==null)");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("instance = new ");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("return instance;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getInstance", this._typeReferenceBuilder.typeRef(it), _function_6);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method);
      EList<JvmMember> _members_5 = it.getMembers();
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "evento", this._typeReferenceBuilder.typeRef(Event.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(eventDefinitionClass, "map", this._typeReferenceBuilder.typeRef(Map.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("eventBroker.multicast(evento, map);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "multicast", this._typeReferenceBuilder.typeRef(void.class), _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_1);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmOperation> _function_8 = (JvmOperation it_1) -> {
        it_1.setStatic(false);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(URL.class);
            _builder.append(" url = eventBroker.getAsyncAddress();");
            _builder.newLineIfNotEmpty();
            _builder.append("if(url!=null){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return url;");
            _builder.newLine();
            _builder.append("}else{");
            _builder.newLine();
            _builder.append("\t");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef, "\t");
            _builder.append(".getLogger().error(\"[Handle] Could not obtain JGroups ip Address for the async monitor\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("try{");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return new ");
            _builder.append(URL.class, "\t\t");
            _builder.append("(\"http:127.0.0.1\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}catch(");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(MalformedURLException.class);
            _builder.append(_typeRef_1, "\t");
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(ReceiverMessageHandler.class);
            _builder.append(_typeRef_2, "\t\t");
            _builder.append(".getLogger().error(\"[Handle] \"+e.getMessage());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return null;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(eventDefinitionClass, "getAsyncAddress", this._typeReferenceBuilder.typeRef(URL.class), _function_8);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_2);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(eventDefinitionClass, ("co.edu.icesi.eketal.handlercontrol." + EketalJvmModelInferrer.handlerClassName)), _function_1);
  }
  
  public void createGroupClass(final IJvmDeclaredTypeAcceptor acceptor, final EventClass claseGrupos) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      final TreeSet<String> grupos = new TreeSet<String>();
      final Function1<Host, String> _function_1 = (Host h) -> {
        return h.getIp();
      };
      final Function1<Host, String> function = _function_1;
      final Consumer<Group> _function_2 = (Group it_1) -> {
        String _name = it_1.getName();
        String _plus = ("\"" + _name);
        String _plus_1 = (_plus + ":[");
        String _join = IterableExtensions.<Host>join(it_1.getHosts(), ",", function);
        String _plus_2 = (_plus_1 + _join);
        String _plus_3 = (_plus_2 + "]\"");
        grupos.add(_plus_3);
      };
      Iterables.<Group>filter(claseGrupos.getDeclarations(), Group.class).forEach(_function_2);
      boolean _isEmpty = grupos.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmField> _function_3 = (JvmField it_1) -> {
          it_1.setStatic(true);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("{");
              String _join = IterableExtensions.join(grupos, ",");
              _builder.append(_join);
              _builder.append("}");
            }
          };
          this._jvmTypesBuilder.setInitializer(it_1, _client);
        };
        JvmField _field = this._jvmTypesBuilder.toField(claseGrupos, "SET_VALUES", this._typeReferenceBuilder.typeRef("java.lang.String[]"), _function_3);
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      }
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmField> _function_4 = (JvmField it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("initializeGroups()");
          }
        };
        this._jvmTypesBuilder.setInitializer(it_1, _client);
      };
      JvmField _field_1 = this._jvmTypesBuilder.toField(claseGrupos, "grupos", this._typeReferenceBuilder.typeRef(Map.class, this._typeReferenceBuilder.typeRef(String.class), this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(URL.class))), _function_4);
      this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _field_1);
      EList<JvmMember> _members_2 = it.getMembers();
      final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append(Map.class);
            _builder.append(" retorno = ");
            _builder.append(Collections.class);
            _builder.append(".synchronizedMap(new ");
            _builder.append(Hashtable.class);
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("for(");
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef);
            _builder.append(" s : SET_VALUES){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef_1, "\t");
            _builder.append("[] keyValue = s.replace(\"]\",\"\").split(");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Pattern.class);
            _builder.append(_typeRef_2, "\t");
            _builder.append(".quote(\":[\"));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Set.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class));
            _builder.append(_typeRef_3, "\t");
            _builder.append(" values = new ");
            JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(HashSet.class);
            _builder.append(_typeRef_4, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("for(");
            JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class);
            _builder.append(_typeRef_5, "\t");
            _builder.append(" ip : keyValue[1].split(\",\")){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("try{");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("if(ip.equals(\"localhost\")){");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t\t\t\t");
            _builder.append(" local = co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName, "\t\t\t\t");
            _builder.append(".getInstance();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("values.add(new ");
            JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_6, "\t\t\t\t");
            _builder.append("(\"http://\"+local.getAsyncAddress().getHost()));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}else{");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("values.add(new ");
            JvmTypeReference _typeRef_7 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_7, "\t\t\t\t");
            _builder.append("(\"http://\"+ip));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}catch(");
            JvmTypeReference _typeRef_8 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Exception.class);
            _builder.append(_typeRef_8, "\t\t");
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno.put(keyValue[0],values);");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            _builder.append("return retorno;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(claseGrupos, "initializeGroups", this._typeReferenceBuilder.typeRef(Map.class), _function_5);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      EList<JvmMember> _members_3 = it.getMembers();
      final Procedure1<JvmConstructor> _function_6 = (JvmConstructor it_1) -> {
      };
      JvmConstructor _constructor = this._jvmTypesBuilder.toConstructor(claseGrupos, _function_6);
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members_3, _constructor);
      EList<JvmMember> _members_4 = it.getMembers();
      final Procedure1<JvmOperation> _function_7 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "newGrupo", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
        JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(claseGrupos, "hosts", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(URL.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("grupos.put(newGrupo, hosts);");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(claseGrupos, "addGroup", this._typeReferenceBuilder.typeRef(void.class), _function_7);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_4, _method_1);
      EList<JvmMember> _members_5 = it.getMembers();
      final Procedure1<JvmOperation> _function_8 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupoEliminar", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return grupos.remove(grupoEliminar)!=null;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_2 = this._jvmTypesBuilder.toMethod(claseGrupos, "removeGroup", this._typeReferenceBuilder.typeRef(Boolean.class), _function_8);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_5, _method_2);
      EList<JvmMember> _members_6 = it.getMembers();
      final Procedure1<JvmOperation> _function_9 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "grupo", this._typeReferenceBuilder.typeRef(String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("return true;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_3 = this._jvmTypesBuilder.toMethod(claseGrupos, "on", this._typeReferenceBuilder.typeRef(boolean.class), _function_9);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_6, _method_3);
      EList<JvmMember> _members_7 = it.getMembers();
      final Procedure1<JvmOperation> _function_10 = (JvmOperation it_1) -> {
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(claseGrupos, "nombreGrupo", 
          this._typeReferenceBuilder.typeRef(
            String.class));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        it_1.setStatic(true);
        StringConcatenationClient _client = new StringConcatenationClient() {
          @Override
          protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
            _builder.append("if(grupos==null){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("return false;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append(" local = co.edu.icesi.eketal.handlercontrol.");
            _builder.append(EketalJvmModelInferrer.handlerClassName);
            _builder.append(".getInstance();");
            _builder.newLineIfNotEmpty();
            JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef);
            _builder.append(" url = local.getAsyncAddress();");
            _builder.newLineIfNotEmpty();
            JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(boolean.class);
            _builder.append(_typeRef_1);
            _builder.append(" retorno = false;");
            _builder.newLineIfNotEmpty();
            _builder.append("try{\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno = grupos.get(nombreGrupo).contains(new ");
            JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(URL.class);
            _builder.append(_typeRef_2, "\t");
            _builder.append("(\"http://\"+url.getHost()));");
            _builder.newLineIfNotEmpty();
            _builder.append("}catch(");
            JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Exception.class);
            _builder.append(_typeRef_3);
            _builder.append(" e){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("e.printStackTrace();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("retorno = false;");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            _builder.append("return retorno;");
            _builder.newLine();
          }
        };
        this._jvmTypesBuilder.setBody(it_1, _client);
      };
      JvmOperation _method_4 = this._jvmTypesBuilder.toMethod(claseGrupos, "host", this._typeReferenceBuilder.typeRef(boolean.class), _function_10);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_7, _method_4);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(claseGrupos, ("co.edu.icesi.eketal.groupsimpl." + EketalJvmModelInferrer.groupClassName)), _function);
  }
  
  public JvmOperation AutomatonInit(final Automaton declaracion) {
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      EList<JvmFormalParameter> _parameters = it.getParameters();
      JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(declaracion, "transitionSet", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(Transition.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
      EList<JvmFormalParameter> _parameters_1 = it.getParameters();
      JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(declaracion, "estadosFinales", this._typeReferenceBuilder.typeRef(Set.class, this._typeReferenceBuilder.typeRef(State.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
      EList<JvmFormalParameter> _parameters_2 = it.getParameters();
      JvmFormalParameter _parameter_2 = this._jvmTypesBuilder.toParameter(declaracion, "expressions", 
        this._typeReferenceBuilder.typeRef(Hashtable.class, this._typeReferenceBuilder.typeRef(Expression.class), this._typeReferenceBuilder.typeRef(Character.class)));
      this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_2, _parameter_2);
      it.setStatic(true);
      it.setVisibility(JvmVisibility.PRIVATE);
      StringConcatenationClient _client = new StringConcatenationClient() {
        @Override
        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
          _builder.append("//Relaci√≥n evento caracter");
          _builder.newLine();
          JvmTypeReference _typeRef = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Map.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
          _builder.append(_typeRef);
          _builder.append(" mapping = new ");
          JvmTypeReference _typeRef_1 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(TreeMap.class, EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(String.class), EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Character.class));
          _builder.append(_typeRef_1);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
          _builder.append("//Estado inicial");
          _builder.newLine();
          JvmTypeReference _typeRef_2 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
          _builder.append(_typeRef_2);
          _builder.append(" inicial = null;");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("int consecutivo = 65;");
          _builder.newLine();
          _builder.append(Character.class);
          _builder.append(" caracter = (char)consecutivo;");
          _builder.newLineIfNotEmpty();
          _builder.append(String.class);
          _builder.append(" nombreEvento = \"\";");
          _builder.newLineIfNotEmpty();
          _builder.append(String.class);
          _builder.append(" estadoLlegada = \"\";");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          {
            EList<Step> _steps = declaracion.getSteps();
            for(final Step step : _steps) {
              _builder.append("//Definici√≥n del estado: ");
              String _name = step.getName();
              _builder.append(_name);
              _builder.newLineIfNotEmpty();
              _builder.append("String estado");
              String _firstUpper = StringExtensions.toFirstUpper(step.getName());
              _builder.append(_firstUpper);
              _builder.append(" = \"");
              String _name_1 = step.getName();
              _builder.append(_name_1);
              _builder.append("\";");
              _builder.newLineIfNotEmpty();
              _builder.append("estados.put(estado");
              String _firstUpper_1 = StringExtensions.toFirstUpper(step.getName());
              _builder.append(_firstUpper_1);
              _builder.append(", new ");
              JvmTypeReference _typeRef_3 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
              _builder.append(_typeRef_3);
              _builder.append("());");
              _builder.newLineIfNotEmpty();
              {
                if (((!Objects.equal(step.getType(), null)) && Objects.equal(step.getType(), StateType.START))) {
                  _builder.append("//");
                  StateType _type = step.getType();
                  _builder.append(_type);
                  _builder.append(" ");
                  _builder.append(StateType.START);
                  _builder.append(" ");
                  _builder.append(StateType.START_VALUE);
                  _builder.newLineIfNotEmpty();
                  _builder.append("//Estado inicial: ");
                  String _name_2 = step.getName();
                  _builder.append(_name_2);
                  _builder.newLineIfNotEmpty();
                  _builder.append("inicial = estados.get(estado");
                  String _firstUpper_2 = StringExtensions.toFirstUpper(step.getName());
                  _builder.append(_firstUpper_2);
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Step> _steps_1 = declaracion.getSteps();
            for(final Step step_1 : _steps_1) {
              {
                boolean _isEmpty = step_1.getTransitions().isEmpty();
                boolean _not = (!_isEmpty);
                if (_not) {
                  {
                    EList<TransDef> _transitions = step_1.getTransitions();
                    for(final TransDef transition : _transitions) {
                      _builder.append("//Transicion de ");
                      String _name_3 = transition.getEvent().getName();
                      _builder.append(_name_3);
                      _builder.append(" -> ");
                      String _name_4 = transition.getTarget().getName();
                      _builder.append(_name_4);
                      _builder.newLineIfNotEmpty();
                      _builder.append("estadoLlegada = \"");
                      String _name_5 = transition.getTarget().getName();
                      _builder.append(_name_5);
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!estados.containsKey(estadoLlegada)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("estados.put(estado");
                      String _firstUpper_3 = StringExtensions.toFirstUpper(step_1.getName());
                      _builder.append(_firstUpper_3, "\t");
                      _builder.append(", new ");
                      JvmTypeReference _typeRef_4 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(State.class);
                      _builder.append(_typeRef_4, "\t");
                      _builder.append("());");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("caracter = (char)consecutivo;");
                      _builder.newLine();
                      _builder.append("consecutivo++;");
                      _builder.newLine();
                      _builder.append("nombreEvento = \"");
                      String _name_6 = transition.getEvent().getName();
                      _builder.append(_name_6);
                      _builder.append("\";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if(!mapping.containsKey(nombreEvento)){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("mapping.put(nombreEvento, caracter);");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("expressions.put(new ");
                      _builder.append(DefaultEqualsExpression.class, "\t");
                      _builder.append("(new ");
                      _builder.append(NamedEvent.class, "\t");
                      _builder.append("(nombreEvento)), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("}");
                      _builder.newLine();
                      JvmTypeReference _typeRef_5 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_5);
                      _builder.append(" ");
                      String _name_7 = step_1.getName();
                      _builder.append(_name_7);
                      String _firstUpper_4 = StringExtensions.toFirstUpper(transition.getEvent().getName());
                      _builder.append(_firstUpper_4);
                      _builder.append(" = new ");
                      JvmTypeReference _typeRef_6 = EketalJvmModelInferrer.this._typeReferenceBuilder.typeRef(Transition.class);
                      _builder.append(_typeRef_6);
                      _builder.append("(estados.get(estado");
                      String _firstUpper_5 = StringExtensions.toFirstUpper(step_1.getName());
                      _builder.append(_firstUpper_5);
                      _builder.append("), estados.get(estadoLlegada), mapping.get(nombreEvento));");
                      _builder.newLineIfNotEmpty();
                      _builder.append("transitionSet.add(");
                      String _name_8 = step_1.getName();
                      _builder.append(_name_8);
                      String _firstUpper_6 = StringExtensions.toFirstUpper(transition.getEvent().getName());
                      _builder.append(_firstUpper_6);
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.newLine();
                    }
                  }
                }
              }
              {
                StateType _type_1 = step_1.getType();
                boolean _equals = Objects.equal(_type_1, StateType.END);
                if (_equals) {
                  _builder.append("//Estado final ");
                  String _firstUpper_7 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_7);
                  _builder.newLineIfNotEmpty();
                  _builder.append("estados.get(estado");
                  String _firstUpper_8 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_8);
                  _builder.append(").setAccept(true);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("estadosFinales.add(estados.get(estado");
                  String _firstUpper_9 = StringExtensions.toFirstUpper(step_1.getName());
                  _builder.append(_firstUpper_9);
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                  _builder.newLine();
                }
              }
            }
          }
          _builder.append("return inicial;");
          _builder.newLine();
        }
      };
      this._jvmTypesBuilder.setBody(it, _client);
    };
    final JvmOperation method = this._jvmTypesBuilder.toMethod(declaracion, "initialize", this._typeReferenceBuilder.typeRef(State.class), _function);
    return method;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Model) {
      _infer((Model)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}

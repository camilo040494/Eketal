/*
 * generated by Xtext 2.12.0
 */
package co.edu.icesi.eketal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import jbase.services.JbaseGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EketalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Assignment cTypeDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeclarationEventClassParserRuleCall_2_0 = (RuleCall)cTypeDeclarationAssignment_2.eContents().get(0);
		
		////////////////////////////////////////////////////////////////////////////
		///////////////////////////////Event Class//////////////////////////////////
		////////////////////////////////////////////////////////////////////////////
		//Model:
		//	('package' name=QualifiedName -> ';'?)?
		//	importSection=XImportSection?
		//	typeDeclaration=EventClass?;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=QualifiedName -> ';'?)? importSection=XImportSection? typeDeclaration=EventClass?
		public Group getGroup() { return cGroup; }
		
		//('package' name=QualifiedName -> ';'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//-> ';'?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }
		
		//typeDeclaration=EventClass?
		public Assignment getTypeDeclarationAssignment_2() { return cTypeDeclarationAssignment_2; }
		
		//EventClass
		public RuleCall getTypeDeclarationEventClassParserRuleCall_2_0() { return cTypeDeclarationEventClassParserRuleCall_2_0; }
	}
	public class EventClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.EventClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventclassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventClass:
		//	'eventclass' name=ID '{' declarations+=Decl* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'eventclass' name=ID '{' declarations+=Decl* '}'
		public Group getGroup() { return cGroup; }
		
		//'eventclass'
		public Keyword getEventclassKeyword_0() { return cEventclassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Decl*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Decl
		public RuleCall getDeclarationsDeclParserRuleCall_3_0() { return cDeclarationsDeclParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutomatonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLtlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRcParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMSigParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJVarDParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEvDeclParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Decl:
		//	Automaton | Ltl
		//	| Rc
		//	| MSig
		//	| JVarD
		//	| Group
		//	| EvDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//Automaton | Ltl | Rc | MSig | JVarD | Group | EvDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Automaton
		public RuleCall getAutomatonParserRuleCall_0() { return cAutomatonParserRuleCall_0; }
		
		//Ltl
		public RuleCall getLtlParserRuleCall_1() { return cLtlParserRuleCall_1; }
		
		//Rc
		public RuleCall getRcParserRuleCall_2() { return cRcParserRuleCall_2; }
		
		//MSig
		public RuleCall getMSigParserRuleCall_3() { return cMSigParserRuleCall_3; }
		
		//JVarD
		public RuleCall getJVarDParserRuleCall_4() { return cJVarDParserRuleCall_4; }
		
		//Group
		public RuleCall getGroupParserRuleCall_5() { return cGroupParserRuleCall_5; }
		
		//EvDecl
		public RuleCall getEvDeclParserRuleCall_6() { return cEvDeclParserRuleCall_6; }
	}
	public class JVarDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.JVarD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//JVarD:
		//	name=ValidID ':' type=JvmTypeReference //Variable en java
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=JvmTypeReference
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }
	}
	public class MSigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.MSig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//MSig:
		//	'op' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':'
		//	type=JvmTypeReference)?
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'op' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':'
		//type=JvmTypeReference)? body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'op'
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_5_1_0() { return cTypeJvmTypeReferenceParserRuleCall_5_1_0; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class EvDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.EvDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventosOrEventParserRuleCall_6_0 = (RuleCall)cEventosAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////////////////////////////////////////
		////Event Declaration
		////////////////////////////////////////
		//EvDecl:
		//	'event' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' ":" eventos+=OrEvent*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' ":" eventos+=OrEvent*
		//';'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//eventos+=OrEvent*
		public Assignment getEventosAssignment_6() { return cEventosAssignment_6; }
		
		//OrEvent
		public RuleCall getEventosOrEventParserRuleCall_6_0() { return cEventosOrEventParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class OrEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.OrEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndEventParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrEventLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndEventParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrEvent EventExpression:
		//	AndEvent ({OrEvent.left=current} op='||' right=AndEvent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndEvent ({OrEvent.left=current} op='||' right=AndEvent)*
		public Group getGroup() { return cGroup; }
		
		//AndEvent
		public RuleCall getAndEventParserRuleCall_0() { return cAndEventParserRuleCall_0; }
		
		//({OrEvent.left=current} op='||' right=AndEvent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrEvent.left=current}
		public Action getOrEventLeftAction_1_0() { return cOrEventLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=AndEvent
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndEvent
		public RuleCall getRightAndEventParserRuleCall_1_2_0() { return cRightAndEventParserRuleCall_1_2_0; }
	}
	public class AndEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.AndEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotEventParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndEventLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotEventParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndEvent EventExpression:
		//	NotEvent ({AndEvent.left=current} op='&&' right=NotEvent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NotEvent ({AndEvent.left=current} op='&&' right=NotEvent)*
		public Group getGroup() { return cGroup; }
		
		//NotEvent
		public RuleCall getNotEventParserRuleCall_0() { return cNotEventParserRuleCall_0; }
		
		//({AndEvent.left=current} op='&&' right=NotEvent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndEvent.left=current}
		public Action getAndEventLeftAction_1_0() { return cAndEventLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=NotEvent
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotEvent
		public RuleCall getRightNotEventParserRuleCall_1_2_0() { return cRightNotEventParserRuleCall_1_2_0; }
	}
	public class NotEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.NotEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryExpresionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NotEvent EventExpression:
		//	AtomEvent | UnaryExpresion;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomEvent | UnaryExpresion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomEvent
		public RuleCall getAtomEventParserRuleCall_0() { return cAtomEventParserRuleCall_0; }
		
		//UnaryExpresion
		public RuleCall getUnaryExpresionParserRuleCall_1() { return cUnaryExpresionParserRuleCall_1; }
	}
	public class UnaryExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.UnaryExpresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpExclamationMarkKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAtomEventParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//UnaryExpresion EventExpression:
		//	{UnaryEvent} op='!' expr=AtomEvent
		//	//{UnaryEvent} => op='!' expr=AtomEvent //TODO significado de =>
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryEvent} op='!' expr=AtomEvent
		public Group getGroup() { return cGroup; }
		
		//{UnaryEvent}
		public Action getUnaryEventAction_0() { return cUnaryEventAction_0; }
		
		//op='!'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_1_0() { return cOpExclamationMarkKeyword_1_0; }
		
		//expr=AtomEvent
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//AtomEvent
		public RuleCall getExprAtomEventParserRuleCall_2_0() { return cExprAtomEventParserRuleCall_2_0; }
	}
	public class AtomEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.AtomEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTipoEventoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTipoEventoEventPredicateParserRuleCall_0_0 = (RuleCall)cTipoEventoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrEventParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AtomEvent EventExpression:
		//	tipoEvento=EventPredicate | '(' OrEvent ')';
		@Override public ParserRule getRule() { return rule; }
		
		//tipoEvento=EventPredicate | '(' OrEvent ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tipoEvento=EventPredicate
		public Assignment getTipoEventoAssignment_0() { return cTipoEventoAssignment_0; }
		
		//EventPredicate
		public RuleCall getTipoEventoEventPredicateParserRuleCall_0_0() { return cTipoEventoEventPredicateParserRuleCall_0_0; }
		
		//'(' OrEvent ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//OrEvent
		public RuleCall getOrEventParserRuleCall_1_1() { return cOrEventParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class EventPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.EventPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKindAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventPredicate:
		//	KindAttribute
		//	| Trigger;
		@Override public ParserRule getRule() { return rule; }
		
		//KindAttribute | Trigger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KindAttribute
		public RuleCall getKindAttributeParserRuleCall_0() { return cKindAttributeParserRuleCall_0; }
		
		//Trigger
		public RuleCall getTriggerParserRuleCall_1() { return cTriggerParserRuleCall_1; }
	}
	public class KindAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.KindAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHostKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cHostgroupAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cHostgroupGroupCrossReference_0_2_0 = (CrossReference)cHostgroupAssignment_0_2.eContents().get(0);
		private final RuleCall cHostgroupGroupIDTerminalRuleCall_0_2_0_1 = (RuleCall)cHostgroupGroupCrossReference_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOngroupAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cOngroupGroupCrossReference_1_2_0 = (CrossReference)cOngroupAssignment_1_2.eContents().get(0);
		private final RuleCall cOngroupGroupIDTerminalRuleCall_1_2_0_1 = (RuleCall)cOngroupGroupCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionXParenthesizedExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		
		//KindAttribute:
		//	'host' '(' hostgroup=[Group] ')'
		//	| 'on' '(' ongroup=[Group] ')'
		//	| 'if' condition=XParenthesizedExpression
		//	//	| 'eq'"("JExp","JExp")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'host' '(' hostgroup=[Group] ')' | 'on' '(' ongroup=[Group] ')' | 'if' condition=XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'host' '(' hostgroup=[Group] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'host'
		public Keyword getHostKeyword_0_0() { return cHostKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//hostgroup=[Group]
		public Assignment getHostgroupAssignment_0_2() { return cHostgroupAssignment_0_2; }
		
		//[Group]
		public CrossReference getHostgroupGroupCrossReference_0_2_0() { return cHostgroupGroupCrossReference_0_2_0; }
		
		//ID
		public RuleCall getHostgroupGroupIDTerminalRuleCall_0_2_0_1() { return cHostgroupGroupIDTerminalRuleCall_0_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'on' '(' ongroup=[Group] ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'on'
		public Keyword getOnKeyword_1_0() { return cOnKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//ongroup=[Group]
		public Assignment getOngroupAssignment_1_2() { return cOngroupAssignment_1_2; }
		
		//[Group]
		public CrossReference getOngroupGroupCrossReference_1_2_0() { return cOngroupGroupCrossReference_1_2_0; }
		
		//ID
		public RuleCall getOngroupGroupIDTerminalRuleCall_1_2_0_1() { return cOngroupGroupIDTerminalRuleCall_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'if' condition=XParenthesizedExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//condition=XParenthesizedExpression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//XParenthesizedExpression
		public RuleCall getConditionXParenthesizedExpressionParserRuleCall_2_1_0() { return cConditionXParenthesizedExpressionParserRuleCall_2_1_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerTypeTPrefixEnumRuleCall_0_0 = (RuleCall)cTriggerTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturndefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturndefTypeReturnParserRuleCall_2_0 = (RuleCall)cReturndefAssignment_2.eContents().get(0);
		private final Assignment cEsigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEsigQualifiedNameParserRuleCall_3_0 = (RuleCall)cEsigAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsJvmTypeReferenceParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsJvmTypeReferenceParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Trigger:
		//	triggerType=TPrefix '(' returndef=TypeReturn? esig=QualifiedName '(' (params+=JvmTypeReference (','
		//	params+=JvmTypeReference)*)? ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//triggerType=TPrefix '(' returndef=TypeReturn? esig=QualifiedName '(' (params+=JvmTypeReference (','
		//params+=JvmTypeReference)*)? ')' ')'
		public Group getGroup() { return cGroup; }
		
		//triggerType=TPrefix
		public Assignment getTriggerTypeAssignment_0() { return cTriggerTypeAssignment_0; }
		
		//TPrefix
		public RuleCall getTriggerTypeTPrefixEnumRuleCall_0_0() { return cTriggerTypeTPrefixEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//returndef=TypeReturn?
		public Assignment getReturndefAssignment_2() { return cReturndefAssignment_2; }
		
		//TypeReturn
		public RuleCall getReturndefTypeReturnParserRuleCall_2_0() { return cReturndefTypeReturnParserRuleCall_2_0; }
		
		//esig=QualifiedName
		public Assignment getEsigAssignment_3() { return cEsigAssignment_3; }
		
		//QualifiedName
		public RuleCall getEsigQualifiedNameParserRuleCall_3_0() { return cEsigQualifiedNameParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params+=JvmTypeReference (',' params+=JvmTypeReference)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//params+=JvmTypeReference
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }
		
		//JvmTypeReference
		public RuleCall getParamsJvmTypeReferenceParserRuleCall_5_0_0() { return cParamsJvmTypeReferenceParserRuleCall_5_0_0; }
		
		//(',' params+=JvmTypeReference)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//params+=JvmTypeReference
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }
		
		//JvmTypeReference
		public RuleCall getParamsJvmTypeReferenceParserRuleCall_5_1_1_0() { return cParamsJvmTypeReferenceParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TypeReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.TypeReturn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAstkAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAstkANYTerminalRuleCall_0_0 = (RuleCall)cAstkAssignment_0.eContents().get(0);
		private final Assignment cJvmRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cJvmRefJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cJvmRefAssignment_1.eContents().get(0);
		
		//TypeReturn JVMTYPE:
		//	astk=ANY | jvmRef=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//astk=ANY | jvmRef=JvmTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//astk=ANY
		public Assignment getAstkAssignment_0() { return cAstkAssignment_0; }
		
		//ANY
		public RuleCall getAstkANYTerminalRuleCall_0_0() { return cAstkANYTerminalRuleCall_0_0; }
		
		//jvmRef=JvmTypeReference
		public Assignment getJvmRefAssignment_1() { return cJvmRefAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getJvmRefJvmTypeReferenceParserRuleCall_1_0() { return cJvmRefJvmTypeReferenceParserRuleCall_1_0; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostsHostParserRuleCall_3_0 = (RuleCall)cHostsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Group:
		//	'group' name=ID
		//	'{' hosts+=Host* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'group' name=ID '{' hosts+=Host* '}'
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//hosts+=Host*
		public Assignment getHostsAssignment_3() { return cHostsAssignment_3; }
		
		//Host
		public RuleCall getHostsHostParserRuleCall_3_0() { return cHostsHostParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Host");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIpIpParserRuleCall_0_0 = (RuleCall)cIpAssignment_0.eContents().get(0);
		private final Assignment cGroupIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cGroupIdGroupCrossReference_1_0 = (CrossReference)cGroupIdAssignment_1.eContents().get(0);
		private final RuleCall cGroupIdGroupIDTerminalRuleCall_1_0_1 = (RuleCall)cGroupIdGroupCrossReference_1_0.eContents().get(1);
		
		//Host:
		//	ip=Ip
		//	| groupId=[Group];
		@Override public ParserRule getRule() { return rule; }
		
		//ip=Ip | groupId=[Group]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ip=Ip
		public Assignment getIpAssignment_0() { return cIpAssignment_0; }
		
		//Ip
		public RuleCall getIpIpParserRuleCall_0_0() { return cIpIpParserRuleCall_0_0; }
		
		//groupId=[Group]
		public Assignment getGroupIdAssignment_1() { return cGroupIdAssignment_1; }
		
		//[Group]
		public CrossReference getGroupIdGroupCrossReference_1_0() { return cGroupIdGroupCrossReference_1_0; }
		
		//ID
		public RuleCall getGroupIdGroupIDTerminalRuleCall_1_0_1() { return cGroupIdGroupIDTerminalRuleCall_1_0_1; }
	}
	public class IpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Ip");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJphostKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLocalhostKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0_2_0 = (RuleCall)cGroup_2_0_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_2_1 = (Keyword)cGroup_2_0_2.eContents().get(1);
		private final Group cGroup_2_0_2_2 = (Group)cGroup_2_0_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0_2_2_0 = (RuleCall)cGroup_2_0_2_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_2_2_1 = (Keyword)cGroup_2_0_2_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cANYTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//Ip:
		//	"jphost" | "localhost" | (INT '.' (INT '.' (INT '.')?)?)? (INT | ANY);
		@Override public ParserRule getRule() { return rule; }
		
		//"jphost" | "localhost" | (INT '.' (INT '.' (INT '.')?)?)? (INT | ANY)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"jphost"
		public Keyword getJphostKeyword_0() { return cJphostKeyword_0; }
		
		//"localhost"
		public Keyword getLocalhostKeyword_1() { return cLocalhostKeyword_1; }
		
		//(INT '.' (INT '.' (INT '.')?)?)? (INT | ANY)
		public Group getGroup_2() { return cGroup_2; }
		
		//(INT '.' (INT '.' (INT '.')?)?)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0() { return cINTTerminalRuleCall_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_1() { return cFullStopKeyword_2_0_1; }
		
		//(INT '.' (INT '.')?)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_2_0() { return cINTTerminalRuleCall_2_0_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_2_1() { return cFullStopKeyword_2_0_2_1; }
		
		//(INT '.')?
		public Group getGroup_2_0_2_2() { return cGroup_2_0_2_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_2_2_0() { return cINTTerminalRuleCall_2_0_2_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_2_2_1() { return cFullStopKeyword_2_0_2_2_1; }
		
		//INT | ANY
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0() { return cINTTerminalRuleCall_2_1_0; }
		
		//ANY
		public RuleCall getANYTerminalRuleCall_2_1_1() { return cANYTerminalRuleCall_2_1_1; }
	}
	public class AutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomatonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////////////////////////////////////////
		//////Automata definicion
		////////////////////////////////////////
		////TODO estado de finalización default
		//Automaton:
		//	'automaton' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' steps+=Step*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'automaton' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' steps+=Step* '}'
		public Group getGroup() { return cGroup; }
		
		//'automaton'
		public Keyword getAutomatonKeyword_0() { return cAutomatonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStateTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTransitionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTransitionsTransDefParserRuleCall_2_2_0 = (RuleCall)cTransitionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cVerticalLineVerticalLineKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Assignment cTransitionsAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cTransitionsTransDefParserRuleCall_2_4_2_0 = (RuleCall)cTransitionsAssignment_2_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4_3 = (Keyword)cGroup_2_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Step:
		//	type=StateType? name=ID (':' '(' transitions+=TransDef ')' ('||' '(' transitions+=TransDef* ')')*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=StateType? name=ID (':' '(' transitions+=TransDef ')' ('||' '(' transitions+=TransDef* ')')*)? ';'
		public Group getGroup() { return cGroup; }
		
		//type=StateType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_0_0() { return cTypeStateTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' '(' transitions+=TransDef ')' ('||' '(' transitions+=TransDef* ')')*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//transitions+=TransDef
		public Assignment getTransitionsAssignment_2_2() { return cTransitionsAssignment_2_2; }
		
		//TransDef
		public RuleCall getTransitionsTransDefParserRuleCall_2_2_0() { return cTransitionsTransDefParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('||' '(' transitions+=TransDef* ')')*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_4_0() { return cVerticalLineVerticalLineKeyword_2_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_4_1() { return cLeftParenthesisKeyword_2_4_1; }
		
		//transitions+=TransDef*
		public Assignment getTransitionsAssignment_2_4_2() { return cTransitionsAssignment_2_4_2; }
		
		//TransDef
		public RuleCall getTransitionsTransDefParserRuleCall_2_4_2_0() { return cTransitionsTransDefParserRuleCall_2_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4_3() { return cRightParenthesisKeyword_2_4_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TransDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.TransDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEvDeclCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEvDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEvDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetStepCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetStepIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetStepCrossReference_2_0.eContents().get(1);
		
		//TransDef:
		//	event=[EvDecl] '->' target=[Step];
		@Override public ParserRule getRule() { return rule; }
		
		//event=[EvDecl] '->' target=[Step]
		public Group getGroup() { return cGroup; }
		
		//event=[EvDecl]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[EvDecl]
		public CrossReference getEventEvDeclCrossReference_0_0() { return cEventEvDeclCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEvDeclIDTerminalRuleCall_0_0_1() { return cEventEvDeclIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//target=[Step]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[Step]
		public CrossReference getTargetStepCrossReference_2_0() { return cTargetStepCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetStepIDTerminalRuleCall_2_0_1() { return cTargetStepIDTerminalRuleCall_2_0_1; }
	}
	public class LtlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Ltl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLtlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredicateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredicateLtlThenParserRuleCall_6_0 = (RuleCall)cPredicateAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////////////////////////////////////////
		//////Linear Temporal Logic definition
		////////////////////////////////////////
		////TODO precedences:
		////Unary->Binary
		////Bind from right to left
		////always eventually p = (always (eventually p))
		////p until q until r = p until (q until r)
		////until -> &&,||,->
		////http://www.cds.caltech.edu/~murray/courses/afrl-sp12/L3_ltl-24Apr12.pdf
		//Ltl:
		//	'ltl' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' predicate=LtlThen
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ltl' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' predicate=LtlThen '}'
		public Group getGroup() { return cGroup; }
		
		//'ltl'
		public Keyword getLtlKeyword_0() { return cLtlKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//predicate=LtlThen
		public Assignment getPredicateAssignment_6() { return cPredicateAssignment_6; }
		
		//LtlThen
		public RuleCall getPredicateLtlThenParserRuleCall_6_0() { return cPredicateLtlThenParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LtlThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlThen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLtlOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLtlThenLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLtlOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LtlThen LtlExpression:
		//	LtlOr ({LtlThen.left=current} op='->' right=LtlOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LtlOr ({LtlThen.left=current} op='->' right=LtlOr)*
		public Group getGroup() { return cGroup; }
		
		//LtlOr
		public RuleCall getLtlOrParserRuleCall_0() { return cLtlOrParserRuleCall_0; }
		
		//({LtlThen.left=current} op='->' right=LtlOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LtlThen.left=current}
		public Action getLtlThenLeftAction_1_0() { return cLtlThenLeftAction_1_0; }
		
		//op='->'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'->'
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_1_0; }
		
		//right=LtlOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LtlOr
		public RuleCall getRightLtlOrParserRuleCall_1_2_0() { return cRightLtlOrParserRuleCall_1_2_0; }
	}
	public class LtlOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLtlAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLtlOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLtlAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LtlOr LtlExpression:
		//	LtlAnd ({LtlOr.left=current} op='||' right=LtlAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LtlAnd ({LtlOr.left=current} op='||' right=LtlAnd)*
		public Group getGroup() { return cGroup; }
		
		//LtlAnd
		public RuleCall getLtlAndParserRuleCall_0() { return cLtlAndParserRuleCall_0; }
		
		//({LtlOr.left=current} op='||' right=LtlAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LtlOr.left=current}
		public Action getLtlOrLeftAction_1_0() { return cLtlOrLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=LtlAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LtlAnd
		public RuleCall getRightLtlAndParserRuleCall_1_2_0() { return cRightLtlAndParserRuleCall_1_2_0; }
	}
	public class LtlAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLtlUntilParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLtlAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLtlUntilParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LtlAnd LtlExpression:
		//	LtlUntil ({LtlAnd.left=current} op='&&' right=LtlUntil)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LtlUntil ({LtlAnd.left=current} op='&&' right=LtlUntil)*
		public Group getGroup() { return cGroup; }
		
		//LtlUntil
		public RuleCall getLtlUntilParserRuleCall_0() { return cLtlUntilParserRuleCall_0; }
		
		//({LtlAnd.left=current} op='&&' right=LtlUntil)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LtlAnd.left=current}
		public Action getLtlAndLeftAction_1_0() { return cLtlAndLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=LtlUntil
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LtlUntil
		public RuleCall getRightLtlUntilParserRuleCall_1_2_0() { return cRightLtlUntilParserRuleCall_1_2_0; }
	}
	public class LtlUntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlUntil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLtlUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLtlUntilLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpUntilKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLtlUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LtlUntil LtlExpression:
		//	LtlUnary ({LtlUntil.left=current} op='until' right=LtlUnary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LtlUnary ({LtlUntil.left=current} op='until' right=LtlUnary)*
		public Group getGroup() { return cGroup; }
		
		//LtlUnary
		public RuleCall getLtlUnaryParserRuleCall_0() { return cLtlUnaryParserRuleCall_0; }
		
		//({LtlUntil.left=current} op='until' right=LtlUnary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LtlUntil.left=current}
		public Action getLtlUntilLeftAction_1_0() { return cLtlUntilLeftAction_1_0; }
		
		//op='until'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'until'
		public Keyword getOpUntilKeyword_1_1_0() { return cOpUntilKeyword_1_1_0; }
		
		//right=LtlUnary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LtlUnary
		public RuleCall getRightLtlUnaryParserRuleCall_1_2_0() { return cRightLtlUnaryParserRuleCall_1_2_0; }
	}
	public class LtlUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLtlAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLtlAlwaysParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLtlNextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLtlEventuallyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLtlNotParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LtlUnary LtlExpression:
		//	LtlAtom | LtlAlways | LtlNext | LtlEventually | LtlNot;
		@Override public ParserRule getRule() { return rule; }
		
		//LtlAtom | LtlAlways | LtlNext | LtlEventually | LtlNot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LtlAtom
		public RuleCall getLtlAtomParserRuleCall_0() { return cLtlAtomParserRuleCall_0; }
		
		//LtlAlways
		public RuleCall getLtlAlwaysParserRuleCall_1() { return cLtlAlwaysParserRuleCall_1; }
		
		//LtlNext
		public RuleCall getLtlNextParserRuleCall_2() { return cLtlNextParserRuleCall_2; }
		
		//LtlEventually
		public RuleCall getLtlEventuallyParserRuleCall_3() { return cLtlEventuallyParserRuleCall_3; }
		
		//LtlNot
		public RuleCall getLtlNotParserRuleCall_4() { return cLtlNotParserRuleCall_4; }
	}
	public class LtlNextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlNext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryLtlAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpNextKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLtlAtomParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//LtlNext LtlExpression:
		//	{UnaryLtl} op='next' expr=LtlAtom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryLtl} op='next' expr=LtlAtom
		public Group getGroup() { return cGroup; }
		
		//{UnaryLtl}
		public Action getUnaryLtlAction_0() { return cUnaryLtlAction_0; }
		
		//op='next'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'next'
		public Keyword getOpNextKeyword_1_0() { return cOpNextKeyword_1_0; }
		
		//expr=LtlAtom
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LtlAtom
		public RuleCall getExprLtlAtomParserRuleCall_2_0() { return cExprLtlAtomParserRuleCall_2_0; }
	}
	public class LtlAlwaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlAlways");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryLtlAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpAlwaysKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLtlAtomParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//LtlAlways LtlExpression:
		//	{UnaryLtl} op='always' expr=LtlAtom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryLtl} op='always' expr=LtlAtom
		public Group getGroup() { return cGroup; }
		
		//{UnaryLtl}
		public Action getUnaryLtlAction_0() { return cUnaryLtlAction_0; }
		
		//op='always'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'always'
		public Keyword getOpAlwaysKeyword_1_0() { return cOpAlwaysKeyword_1_0; }
		
		//expr=LtlAtom
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LtlAtom
		public RuleCall getExprLtlAtomParserRuleCall_2_0() { return cExprLtlAtomParserRuleCall_2_0; }
	}
	public class LtlEventuallyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlEventually");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryLtlAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpEventuallyKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLtlAtomParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//LtlEventually LtlExpression:
		//	{UnaryLtl} op='eventually' expr=LtlAtom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryLtl} op='eventually' expr=LtlAtom
		public Group getGroup() { return cGroup; }
		
		//{UnaryLtl}
		public Action getUnaryLtlAction_0() { return cUnaryLtlAction_0; }
		
		//op='eventually'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'eventually'
		public Keyword getOpEventuallyKeyword_1_0() { return cOpEventuallyKeyword_1_0; }
		
		//expr=LtlAtom
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LtlAtom
		public RuleCall getExprLtlAtomParserRuleCall_2_0() { return cExprLtlAtomParserRuleCall_2_0; }
	}
	public class LtlNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryLtlAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpExclamationMarkKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLtlAtomParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//LtlNot LtlExpression:
		//	{UnaryLtl} op='!' expr=LtlAtom;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryLtl} op='!' expr=LtlAtom
		public Group getGroup() { return cGroup; }
		
		//{UnaryLtl}
		public Action getUnaryLtlAction_0() { return cUnaryLtlAction_0; }
		
		//op='!'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_1_0() { return cOpExclamationMarkKeyword_1_0; }
		
		//expr=LtlAtom
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LtlAtom
		public RuleCall getExprLtlAtomParserRuleCall_2_0() { return cExprLtlAtomParserRuleCall_2_0; }
	}
	public class LtlAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.LtlAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cEventEvDeclCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEvDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEvDeclCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLtlThenParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//LtlAtom LtlExpression:
		//	event=[EvDecl] | '(' LtlThen ')';
		@Override public ParserRule getRule() { return rule; }
		
		//event=[EvDecl] | '(' LtlThen ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//event=[EvDecl]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[EvDecl]
		public CrossReference getEventEvDeclCrossReference_0_0() { return cEventEvDeclCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEvDeclIDTerminalRuleCall_0_0_1() { return cEventEvDeclIDTerminalRuleCall_0_0_1; }
		
		//'(' LtlThen ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//LtlThen
		public RuleCall getLtlThenParserRuleCall_1_1() { return cLtlThenParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class RcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Rc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSyncexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSyncexSyncexKeyword_0_0 = (Keyword)cSyncexAssignment_0.eContents().get(0);
		private final Keyword cReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPosPosEnumRuleCall_2_0 = (RuleCall)cPosAssignment_2.eContents().get(0);
		private final Assignment cAutomatonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAutomatonAutomatonCrossReference_3_0 = (CrossReference)cAutomatonAssignment_3.eContents().get(0);
		private final RuleCall cAutomatonAutomatonIDTerminalRuleCall_3_0_1 = (RuleCall)cAutomatonAutomatonCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cStateStepCrossReference_5_0 = (CrossReference)cStateAssignment_5.eContents().get(0);
		private final RuleCall cStateStepIDTerminalRuleCall_5_0_1 = (RuleCall)cStateStepCrossReference_5_0.eContents().get(1);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		////////////////////////////////////////
		//////Reaction definition
		////////////////////////////////////////
		//Rc:
		//	syncex="syncex"? 'reaction' pos=Pos automaton=[Automaton] '.' state=[Step] body=Body
		//	//	(syncex="syncex")? 'reaction' pos=Pos (state=[Step|QFN]) body=Body//This implementations works with the fully qualifiedname, so the program suggested all the name (package.eventclass.automaton.step) instead of only automaton.step
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//syncex="syncex"? 'reaction' pos=Pos automaton=[Automaton] '.' state=[Step] body=Body
		public Group getGroup() { return cGroup; }
		
		//syncex="syncex"?
		public Assignment getSyncexAssignment_0() { return cSyncexAssignment_0; }
		
		//"syncex"
		public Keyword getSyncexSyncexKeyword_0_0() { return cSyncexSyncexKeyword_0_0; }
		
		//'reaction'
		public Keyword getReactionKeyword_1() { return cReactionKeyword_1; }
		
		//pos=Pos
		public Assignment getPosAssignment_2() { return cPosAssignment_2; }
		
		//Pos
		public RuleCall getPosPosEnumRuleCall_2_0() { return cPosPosEnumRuleCall_2_0; }
		
		//automaton=[Automaton]
		public Assignment getAutomatonAssignment_3() { return cAutomatonAssignment_3; }
		
		//[Automaton]
		public CrossReference getAutomatonAutomatonCrossReference_3_0() { return cAutomatonAutomatonCrossReference_3_0; }
		
		//ID
		public RuleCall getAutomatonAutomatonIDTerminalRuleCall_3_0_1() { return cAutomatonAutomatonIDTerminalRuleCall_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//state=[Step]
		public Assignment getStateAssignment_5() { return cStateAssignment_5; }
		
		//[Step]
		public CrossReference getStateStepCrossReference_5_0() { return cStateStepCrossReference_5_0; }
		
		//ID
		public RuleCall getStateStepIDTerminalRuleCall_5_0_1() { return cStateStepIDTerminalRuleCall_5_0_1; }
		
		//body=Body
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_6_0() { return cBodyBodyParserRuleCall_6_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Body");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//Body:
		//	body=XBlockExpression
		//	//	body=XBlockExpression | 'addGroup' '('grupo=[Group]')' | 'removeGroup' '('grupo=[Group]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment() { return cBodyAssignment; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_0() { return cBodyXBlockExpressionParserRuleCall_0; }
	}
	
	public class TPrefixElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.TPrefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCallEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCallCallKeyword_0_0 = (Keyword)cCallEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExecutionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExecutionExecutionKeyword_1_0 = (Keyword)cExecutionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TPrefix:
		//	call | execution;
		public EnumRule getRule() { return rule; }
		
		//call | execution
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//call
		public EnumLiteralDeclaration getCallEnumLiteralDeclaration_0() { return cCallEnumLiteralDeclaration_0; }
		
		//"call"
		public Keyword getCallCallKeyword_0_0() { return cCallCallKeyword_0_0; }
		
		//execution
		public EnumLiteralDeclaration getExecutionEnumLiteralDeclaration_1() { return cExecutionEnumLiteralDeclaration_1; }
		
		//"execution"
		public Keyword getExecutionExecutionKeyword_1_0() { return cExecutionExecutionKeyword_1_0; }
	}
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStateStateKeyword_0_0 = (Keyword)cStateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStartStartKeyword_1_0 = (Keyword)cStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEndEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEndEndKeyword_2_0 = (Keyword)cEndEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StateType:
		//	state |
		//	start |
		//	end;
		public EnumRule getRule() { return rule; }
		
		//state | start | end
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//state
		public EnumLiteralDeclaration getStateEnumLiteralDeclaration_0() { return cStateEnumLiteralDeclaration_0; }
		
		//"state"
		public Keyword getStateStateKeyword_0_0() { return cStateStateKeyword_0_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_1() { return cStartEnumLiteralDeclaration_1; }
		
		//"start"
		public Keyword getStartStartKeyword_1_0() { return cStartStartKeyword_1_0; }
		
		//end
		public EnumLiteralDeclaration getEndEnumLiteralDeclaration_2() { return cEndEnumLiteralDeclaration_2; }
		
		//"end"
		public Keyword getEndEndKeyword_2_0() { return cEndEndKeyword_2_0; }
	}
	public class PosElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.Pos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBeforeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_0_0 = (Keyword)cBeforeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAroundEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAroundAroundKeyword_1_0 = (Keyword)cAroundEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAfterAfterKeyword_2_0 = (Keyword)cAfterEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Pos:
		//	before | around | after;
		public EnumRule getRule() { return rule; }
		
		//before | around | after
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//before
		public EnumLiteralDeclaration getBeforeEnumLiteralDeclaration_0() { return cBeforeEnumLiteralDeclaration_0; }
		
		//"before"
		public Keyword getBeforeBeforeKeyword_0_0() { return cBeforeBeforeKeyword_0_0; }
		
		//around
		public EnumLiteralDeclaration getAroundEnumLiteralDeclaration_1() { return cAroundEnumLiteralDeclaration_1; }
		
		//"around"
		public Keyword getAroundAroundKeyword_1_0() { return cAroundAroundKeyword_1_0; }
		
		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_2() { return cAfterEnumLiteralDeclaration_2; }
		
		//"after"
		public Keyword getAfterAfterKeyword_2_0() { return cAfterAfterKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final EventClassElements pEventClass;
	private final DeclElements pDecl;
	private final JVarDElements pJVarD;
	private final MSigElements pMSig;
	private final EvDeclElements pEvDecl;
	private final OrEventElements pOrEvent;
	private final AndEventElements pAndEvent;
	private final NotEventElements pNotEvent;
	private final UnaryExpresionElements pUnaryExpresion;
	private final AtomEventElements pAtomEvent;
	private final EventPredicateElements pEventPredicate;
	private final KindAttributeElements pKindAttribute;
	private final TriggerElements pTrigger;
	private final TPrefixElements eTPrefix;
	private final TypeReturnElements pTypeReturn;
	private final TerminalRule tANY;
	private final GroupElements pGroup;
	private final HostElements pHost;
	private final IpElements pIp;
	private final AutomatonElements pAutomaton;
	private final StepElements pStep;
	private final TransDefElements pTransDef;
	private final StateTypeElements eStateType;
	private final LtlElements pLtl;
	private final LtlThenElements pLtlThen;
	private final LtlOrElements pLtlOr;
	private final LtlAndElements pLtlAnd;
	private final LtlUntilElements pLtlUntil;
	private final LtlUnaryElements pLtlUnary;
	private final LtlNextElements pLtlNext;
	private final LtlAlwaysElements pLtlAlways;
	private final LtlEventuallyElements pLtlEventually;
	private final LtlNotElements pLtlNot;
	private final LtlAtomElements pLtlAtom;
	private final RcElements pRc;
	private final PosElements ePos;
	private final BodyElements pBody;
	
	private final Grammar grammar;
	
	private final JbaseGrammarAccess gaJbase;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public EketalGrammarAccess(GrammarProvider grammarProvider,
			JbaseGrammarAccess gaJbase,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaJbase = gaJbase;
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pEventClass = new EventClassElements();
		this.pDecl = new DeclElements();
		this.pJVarD = new JVarDElements();
		this.pMSig = new MSigElements();
		this.pEvDecl = new EvDeclElements();
		this.pOrEvent = new OrEventElements();
		this.pAndEvent = new AndEventElements();
		this.pNotEvent = new NotEventElements();
		this.pUnaryExpresion = new UnaryExpresionElements();
		this.pAtomEvent = new AtomEventElements();
		this.pEventPredicate = new EventPredicateElements();
		this.pKindAttribute = new KindAttributeElements();
		this.pTrigger = new TriggerElements();
		this.eTPrefix = new TPrefixElements();
		this.pTypeReturn = new TypeReturnElements();
		this.tANY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "co.edu.icesi.eketal.Eketal.ANY");
		this.pGroup = new GroupElements();
		this.pHost = new HostElements();
		this.pIp = new IpElements();
		this.pAutomaton = new AutomatonElements();
		this.pStep = new StepElements();
		this.pTransDef = new TransDefElements();
		this.eStateType = new StateTypeElements();
		this.pLtl = new LtlElements();
		this.pLtlThen = new LtlThenElements();
		this.pLtlOr = new LtlOrElements();
		this.pLtlAnd = new LtlAndElements();
		this.pLtlUntil = new LtlUntilElements();
		this.pLtlUnary = new LtlUnaryElements();
		this.pLtlNext = new LtlNextElements();
		this.pLtlAlways = new LtlAlwaysElements();
		this.pLtlEventually = new LtlEventuallyElements();
		this.pLtlNot = new LtlNotElements();
		this.pLtlAtom = new LtlAtomElements();
		this.pRc = new RcElements();
		this.ePos = new PosElements();
		this.pBody = new BodyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.edu.icesi.eketal.Eketal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public JbaseGrammarAccess getJbaseGrammarAccess() {
		return gaJbase;
	}
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	////////////////////////////////////////////////////////////////////////////
	///////////////////////////////Event Class//////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//Model:
	//	('package' name=QualifiedName -> ';'?)?
	//	importSection=XImportSection?
	//	typeDeclaration=EventClass?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//EventClass:
	//	'eventclass' name=ID '{' declarations+=Decl* '}';
	public EventClassElements getEventClassAccess() {
		return pEventClass;
	}
	
	public ParserRule getEventClassRule() {
		return getEventClassAccess().getRule();
	}
	
	//Decl:
	//	Automaton | Ltl
	//	| Rc
	//	| MSig
	//	| JVarD
	//	| Group
	//	| EvDecl;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//JVarD:
	//	name=ValidID ':' type=JvmTypeReference //Variable en java
	//;
	public JVarDElements getJVarDAccess() {
		return pJVarD;
	}
	
	public ParserRule getJVarDRule() {
		return getJVarDAccess().getRule();
	}
	
	//MSig:
	//	'op' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':'
	//	type=JvmTypeReference)?
	//	body=XBlockExpression;
	public MSigElements getMSigAccess() {
		return pMSig;
	}
	
	public ParserRule getMSigRule() {
		return getMSigAccess().getRule();
	}
	
	////////////////////////////////////////
	////Event Declaration
	////////////////////////////////////////
	//EvDecl:
	//	'event' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' ":" eventos+=OrEvent*
	//	';';
	public EvDeclElements getEvDeclAccess() {
		return pEvDecl;
	}
	
	public ParserRule getEvDeclRule() {
		return getEvDeclAccess().getRule();
	}
	
	//OrEvent EventExpression:
	//	AndEvent ({OrEvent.left=current} op='||' right=AndEvent)*;
	public OrEventElements getOrEventAccess() {
		return pOrEvent;
	}
	
	public ParserRule getOrEventRule() {
		return getOrEventAccess().getRule();
	}
	
	//AndEvent EventExpression:
	//	NotEvent ({AndEvent.left=current} op='&&' right=NotEvent)*;
	public AndEventElements getAndEventAccess() {
		return pAndEvent;
	}
	
	public ParserRule getAndEventRule() {
		return getAndEventAccess().getRule();
	}
	
	//NotEvent EventExpression:
	//	AtomEvent | UnaryExpresion;
	public NotEventElements getNotEventAccess() {
		return pNotEvent;
	}
	
	public ParserRule getNotEventRule() {
		return getNotEventAccess().getRule();
	}
	
	//UnaryExpresion EventExpression:
	//	{UnaryEvent} op='!' expr=AtomEvent
	//	//{UnaryEvent} => op='!' expr=AtomEvent //TODO significado de =>
	//;
	public UnaryExpresionElements getUnaryExpresionAccess() {
		return pUnaryExpresion;
	}
	
	public ParserRule getUnaryExpresionRule() {
		return getUnaryExpresionAccess().getRule();
	}
	
	//AtomEvent EventExpression:
	//	tipoEvento=EventPredicate | '(' OrEvent ')';
	public AtomEventElements getAtomEventAccess() {
		return pAtomEvent;
	}
	
	public ParserRule getAtomEventRule() {
		return getAtomEventAccess().getRule();
	}
	
	//EventPredicate:
	//	KindAttribute
	//	| Trigger;
	public EventPredicateElements getEventPredicateAccess() {
		return pEventPredicate;
	}
	
	public ParserRule getEventPredicateRule() {
		return getEventPredicateAccess().getRule();
	}
	
	//KindAttribute:
	//	'host' '(' hostgroup=[Group] ')'
	//	| 'on' '(' ongroup=[Group] ')'
	//	| 'if' condition=XParenthesizedExpression
	//	//	| 'eq'"("JExp","JExp")"
	//;
	public KindAttributeElements getKindAttributeAccess() {
		return pKindAttribute;
	}
	
	public ParserRule getKindAttributeRule() {
		return getKindAttributeAccess().getRule();
	}
	
	//Trigger:
	//	triggerType=TPrefix '(' returndef=TypeReturn? esig=QualifiedName '(' (params+=JvmTypeReference (','
	//	params+=JvmTypeReference)*)? ')' ')';
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//enum TPrefix:
	//	call | execution;
	public TPrefixElements getTPrefixAccess() {
		return eTPrefix;
	}
	
	public EnumRule getTPrefixRule() {
		return getTPrefixAccess().getRule();
	}
	
	//TypeReturn JVMTYPE:
	//	astk=ANY | jvmRef=JvmTypeReference;
	public TypeReturnElements getTypeReturnAccess() {
		return pTypeReturn;
	}
	
	public ParserRule getTypeReturnRule() {
		return getTypeReturnAccess().getRule();
	}
	
	//terminal ANY:
	//	'*';
	public TerminalRule getANYRule() {
		return tANY;
	}
	
	//Group:
	//	'group' name=ID
	//	'{' hosts+=Host* '}';
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Host:
	//	ip=Ip
	//	| groupId=[Group];
	public HostElements getHostAccess() {
		return pHost;
	}
	
	public ParserRule getHostRule() {
		return getHostAccess().getRule();
	}
	
	//Ip:
	//	"jphost" | "localhost" | (INT '.' (INT '.' (INT '.')?)?)? (INT | ANY);
	public IpElements getIpAccess() {
		return pIp;
	}
	
	public ParserRule getIpRule() {
		return getIpAccess().getRule();
	}
	
	////////////////////////////////////////
	//////Automata definicion
	////////////////////////////////////////
	////TODO estado de finalización default
	//Automaton:
	//	'automaton' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' steps+=Step*
	//	'}';
	public AutomatonElements getAutomatonAccess() {
		return pAutomaton;
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//Step:
	//	type=StateType? name=ID (':' '(' transitions+=TransDef ')' ('||' '(' transitions+=TransDef* ')')*)? ';';
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//TransDef:
	//	event=[EvDecl] '->' target=[Step];
	public TransDefElements getTransDefAccess() {
		return pTransDef;
	}
	
	public ParserRule getTransDefRule() {
		return getTransDefAccess().getRule();
	}
	
	//enum StateType:
	//	state |
	//	start |
	//	end;
	public StateTypeElements getStateTypeAccess() {
		return eStateType;
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}
	
	////////////////////////////////////////
	//////Linear Temporal Logic definition
	////////////////////////////////////////
	////TODO precedences:
	////Unary->Binary
	////Bind from right to left
	////always eventually p = (always (eventually p))
	////p until q until r = p until (q until r)
	////until -> &&,||,->
	////http://www.cds.caltech.edu/~murray/courses/afrl-sp12/L3_ltl-24Apr12.pdf
	//Ltl:
	//	'ltl' name=ID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' '{' predicate=LtlThen
	//	'}';
	public LtlElements getLtlAccess() {
		return pLtl;
	}
	
	public ParserRule getLtlRule() {
		return getLtlAccess().getRule();
	}
	
	//LtlThen LtlExpression:
	//	LtlOr ({LtlThen.left=current} op='->' right=LtlOr)*;
	public LtlThenElements getLtlThenAccess() {
		return pLtlThen;
	}
	
	public ParserRule getLtlThenRule() {
		return getLtlThenAccess().getRule();
	}
	
	//LtlOr LtlExpression:
	//	LtlAnd ({LtlOr.left=current} op='||' right=LtlAnd)*;
	public LtlOrElements getLtlOrAccess() {
		return pLtlOr;
	}
	
	public ParserRule getLtlOrRule() {
		return getLtlOrAccess().getRule();
	}
	
	//LtlAnd LtlExpression:
	//	LtlUntil ({LtlAnd.left=current} op='&&' right=LtlUntil)*;
	public LtlAndElements getLtlAndAccess() {
		return pLtlAnd;
	}
	
	public ParserRule getLtlAndRule() {
		return getLtlAndAccess().getRule();
	}
	
	//LtlUntil LtlExpression:
	//	LtlUnary ({LtlUntil.left=current} op='until' right=LtlUnary)*;
	public LtlUntilElements getLtlUntilAccess() {
		return pLtlUntil;
	}
	
	public ParserRule getLtlUntilRule() {
		return getLtlUntilAccess().getRule();
	}
	
	//LtlUnary LtlExpression:
	//	LtlAtom | LtlAlways | LtlNext | LtlEventually | LtlNot;
	public LtlUnaryElements getLtlUnaryAccess() {
		return pLtlUnary;
	}
	
	public ParserRule getLtlUnaryRule() {
		return getLtlUnaryAccess().getRule();
	}
	
	//LtlNext LtlExpression:
	//	{UnaryLtl} op='next' expr=LtlAtom;
	public LtlNextElements getLtlNextAccess() {
		return pLtlNext;
	}
	
	public ParserRule getLtlNextRule() {
		return getLtlNextAccess().getRule();
	}
	
	//LtlAlways LtlExpression:
	//	{UnaryLtl} op='always' expr=LtlAtom;
	public LtlAlwaysElements getLtlAlwaysAccess() {
		return pLtlAlways;
	}
	
	public ParserRule getLtlAlwaysRule() {
		return getLtlAlwaysAccess().getRule();
	}
	
	//LtlEventually LtlExpression:
	//	{UnaryLtl} op='eventually' expr=LtlAtom;
	public LtlEventuallyElements getLtlEventuallyAccess() {
		return pLtlEventually;
	}
	
	public ParserRule getLtlEventuallyRule() {
		return getLtlEventuallyAccess().getRule();
	}
	
	//LtlNot LtlExpression:
	//	{UnaryLtl} op='!' expr=LtlAtom;
	public LtlNotElements getLtlNotAccess() {
		return pLtlNot;
	}
	
	public ParserRule getLtlNotRule() {
		return getLtlNotAccess().getRule();
	}
	
	//LtlAtom LtlExpression:
	//	event=[EvDecl] | '(' LtlThen ')';
	public LtlAtomElements getLtlAtomAccess() {
		return pLtlAtom;
	}
	
	public ParserRule getLtlAtomRule() {
		return getLtlAtomAccess().getRule();
	}
	
	////////////////////////////////////////
	//////Reaction definition
	////////////////////////////////////////
	//Rc:
	//	syncex="syncex"? 'reaction' pos=Pos automaton=[Automaton] '.' state=[Step] body=Body
	//	//	(syncex="syncex")? 'reaction' pos=Pos (state=[Step|QFN]) body=Body//This implementations works with the fully qualifiedname, so the program suggested all the name (package.eventclass.automaton.step) instead of only automaton.step
	//;
	public RcElements getRcAccess() {
		return pRc;
	}
	
	public ParserRule getRcRule() {
		return getRcAccess().getRule();
	}
	
	//enum Pos:
	//	before | around | after;
	public PosElements getPosAccess() {
		return ePos;
	}
	
	public EnumRule getPosRule() {
		return getPosAccess().getRule();
	}
	
	//Body:
	//	body=XBlockExpression
	//	//	body=XBlockExpression | 'addGroup' '('grupo=[Group]')' | 'removeGroup' '('grupo=[Group]')'
	//;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	///**
	// * The syntactic predicate on XBlockExpression is required to avoid
	// * ambiguity with array literal.  However, XBlockExpression must come first, to
	// * be able to parse both while(...) {} and while(...) st; for example.
	// * If we put the predicate on single statement, then it does not seem to
	// * be possible to parse incomplete member feature call.
	// */
	//XJStatementOrBlock XExpression: //	XJArrayConstructorCall | not a valid statement
	// => XBlockExpression |
	//	XJSingleStatement;
	public JbaseGrammarAccess.XJStatementOrBlockElements getXJStatementOrBlockAccess() {
		return gaJbase.getXJStatementOrBlockAccess();
	}
	
	public ParserRule getXJStatementOrBlockRule() {
		return getXJStatementOrBlockAccess().getRule();
	}
	
	//@ Override XImportDeclaration xtype::XImportDeclaration:
	//	=> 'import' (static?='static' importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' |
	//	memberName=ValidID) | importedType=[types::JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) -> ';'*;
	public JbaseGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaJbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//@ Override JvmTypeReference types::JvmTypeReference:
	//	JvmParameterizedTypeReference => ({types::JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	// | XFunctionTypeRef;
	//;
	public JbaseGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaJbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//@ Override FullJvmFormalParameter XJJvmFormalParameter:
	//	{XJJvmFormalParameter} final?='final'? parameterType=JvmTypeReference varArgs?='...'? name=ValidID;
	public JbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaJbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XJSingleStatement XExpression:
	//	XJSemicolonStatement | XSwitchExpression | XIfExpression | XForLoopExpression | XBasicForLoopExpression |
	//	XWhileExpression | XJTryWithResourcesStatement | XTryCatchFinallyExpression | XSynchronizedExpression |
	//	XJEmptyStatement;
	public JbaseGrammarAccess.XJSingleStatementElements getXJSingleStatementAccess() {
		return gaJbase.getXJSingleStatementAccess();
	}
	
	public ParserRule getXJSingleStatementRule() {
		return getXJSingleStatementAccess().getRule();
	}
	
	///*
	// * These are the Java statements that require a semicolon at the end.
	// * 
	// * The final ; is optional in order to be able to parse incomplete
	// * expressions, provide nicer error messages and give better content assist.
	// * The presence of ';' is checked by the validator
	// */
	//XJSemicolonStatement XExpression:
	//	{XJSemicolonStatement} expression=(XJBranchingStatement | XExpressionOrVarDeclaration | XDoWhileExpression |
	//	XReturnExpression | XThrowExpression) -> semicolon=';'?;
	public JbaseGrammarAccess.XJSemicolonStatementElements getXJSemicolonStatementAccess() {
		return gaJbase.getXJSemicolonStatementAccess();
	}
	
	public ParserRule getXJSemicolonStatementRule() {
		return getXJSemicolonStatementAccess().getRule();
	}
	
	//XJEmptyStatement XExpression:
	//	{XJSemicolonStatement} semicolon=';';
	public JbaseGrammarAccess.XJEmptyStatementElements getXJEmptyStatementAccess() {
		return gaJbase.getXJEmptyStatementAccess();
	}
	
	public ParserRule getXJEmptyStatementRule() {
		return getXJEmptyStatementAccess().getRule();
	}
	
	//XJBranchingStatement XExpression:
	//	{XJContinueStatement} "continue" | {XJBreakStatement} "break";
	public JbaseGrammarAccess.XJBranchingStatementElements getXJBranchingStatementAccess() {
		return gaJbase.getXJBranchingStatementAccess();
	}
	
	public ParserRule getXJBranchingStatementRule() {
		return getXJBranchingStatementAccess().getRule();
	}
	
	//@ Override XBlockExpression XExpression:
	//	{XBlockExpression} '{' expressions+=XJStatementOrBlock* '}';
	public JbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaJbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//@ Override XVariableDeclaration:
	//	=> ({XJVariableDeclaration} final?='final'? type=JvmTypeReference name=ValidID) ('=' right=XExpression)? (=> ','
	//	additionalVariables+=XJAdditionalXVariableDeclaration)*;
	public JbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaJbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//// the second predicate is to avoid ambiguities with for loops
	// // that already consider several variable declarations
	//
	//// in our case we always parse them as several variable declarations
	//
	//// since we allow them also as standard variable declarations as in Java
	// XJAdditionalXVariableDeclaration
	//XVariableDeclaration:
	//	{XJAdditionalXVariableDeclaration} name=ValidID ('=' right=XExpression)?;
	public JbaseGrammarAccess.XJAdditionalXVariableDeclarationElements getXJAdditionalXVariableDeclarationAccess() {
		return gaJbase.getXJAdditionalXVariableDeclarationAccess();
	}
	
	public ParserRule getXJAdditionalXVariableDeclarationRule() {
		return getXJAdditionalXVariableDeclarationAccess().getRule();
	}
	
	//@ Override XAssignment XExpression:
	//	=> ({XJAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] '[' indexes+=XExpression ']' ('['
	//	indexes+=XExpression ']')* OpSingleAssign) value=XAssignment | => ({XAssignment}
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | XOrExpression (=>
	//	({XJConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public JbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaJbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//@ Override OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | // added in Jbase
	// '<' '<' '=' | '>' '>'? '>=';
	public JbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaJbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XJFeatureCallWithArrayAccess XExpression:
	//	XFeatureCall => ({XJArrayAccessExpression.array=current} '[' indexes+=XExpression ']' (=> '[' indexes+=XExpression
	//	']')*)?;
	public JbaseGrammarAccess.XJFeatureCallWithArrayAccessElements getXJFeatureCallWithArrayAccessAccess() {
		return gaJbase.getXJFeatureCallWithArrayAccessAccess();
	}
	
	public ParserRule getXJFeatureCallWithArrayAccessRule() {
		return getXJFeatureCallWithArrayAccessAccess().getRule();
	}
	
	//@ Override XFeatureCall XExpression:
	//	{XFeatureCall} feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='('
	//	(featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')?;
	public JbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaJbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//@ Override XConstructorCall XExpression:
	//	{XJConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> explicitTypeArguments?='<'
	//	(typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)*)? '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XExpression (',' arguments+=XExpression)*)? ')')?;
	public JbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaJbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//// dimensions and dimension expressions (feature indexes) are not associated during parsing,
	//
	//// the association, i.e., knowing whether a dimension expression comes after
	//
	//// an empty dimension (which is not legal), will be retrieved by
	//
	//// JbaseModelUtil.arrayDimensionIndexAssociations(XJArrayConstructorCall)
	//
	//// based on the offset of the [ and the array dimension XEpression
	// XJArrayConstructorCall XExpression:
	//	=> ({XJArrayConstructorCall} 'new' type=[types::JvmType|QualifiedName] dimensions+=XJArrayDimension)
	//	indexes+=XExpression? ']' (=> dimensions+=XJArrayDimension indexes+=XExpression? ']')* =>
	//	arrayLiteral=XJArrayLiteral?;
	public JbaseGrammarAccess.XJArrayConstructorCallElements getXJArrayConstructorCallAccess() {
		return gaJbase.getXJArrayConstructorCallAccess();
	}
	
	public ParserRule getXJArrayConstructorCallRule() {
		return getXJArrayConstructorCallAccess().getRule();
	}
	
	//// We need an EObject instead of a simple String since we then
	//
	//// need to find the corresponding node (and offset) with NodeModelUtils
	//
	//// in order to associate dimensions with indexes
	// XJArrayDimension:
	//	{XJArrayDimension} '[';
	public JbaseGrammarAccess.XJArrayDimensionElements getXJArrayDimensionAccess() {
		return gaJbase.getXJArrayDimensionAccess();
	}
	
	public ParserRule getXJArrayDimensionRule() {
		return getXJArrayDimensionAccess().getRule();
	}
	
	//@ Override XCastedExpression XExpression:
	//	=> ({XCastedExpression} '(' type=JvmTypeReference ')' target=XExpression) | XPostfixOperation;
	public JbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaJbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//@ Override XPostfixOperation XExpression:
	//	=> ({XJPrefixOperation} feature=[types::JvmIdentifiableElement|OpPostfix]) operand=XMemberFeatureCall |
	//	XMemberFeatureCall (=> ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix]) | =>
	//	({XJArrayAccessExpression.array=current} '[' indexes+=XExpression ']' (=> '[' indexes+=XExpression ']')*))?;
	public JbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaJbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//@ Override XMemberFeatureCall XExpression:
	//	XPrimaryExpression ( // we don't need this at the moment
	//
	//	//		=>({XJAssignment.assignable=current} ('.'|explicitStatic?="::") 
	//
	//	//			feature=[types::JvmIdentifiableElement|FeatureCallID]
	// //			'[' index=XExpression ']'
	//
	//	//			OpSingleAssign) value=XAssignment
	// //	|
	// => ({XJClassObject.typeExpression=current}
	//	arrayDimensions+=ArrayBrackets* '.' 'class') | => ({XAssignment.assignable=current} '.'
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ".") feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?='(' (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')?)*;
	public JbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaJbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//@ Override XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=FullJvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XJStatementOrBlock;
	public JbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaJbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//@ Override XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XJStatementOrBlock;
	public JbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaJbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//@ Override XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XJStatementOrBlock (=> 'else' else=XJStatementOrBlock)?;
	public JbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaJbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//@ Override XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XJStatementOrBlock;
	public JbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaJbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//@ Override XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XJStatementOrBlock 'while' '(' predicate=XExpression ')';
	public JbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaJbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//@ Override XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' '(' switch=XExpression ')' '{' cases+=XCasePart* ('default' ':'
	//	default=XJSwitchStatements)? '}';
	public JbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaJbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//@ Override XCasePart:
	//	{XCasePart} 'case' case=XExpression ':' then=XJSwitchStatements;
	public JbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaJbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	///**
	// * Java switch's case expression does not require an explicit block { }
	// */ XJSwitchStatements XExpression:
	//	{XJSwitchStatements} expressions+=XJStatementOrBlock*;
	public JbaseGrammarAccess.XJSwitchStatementsElements getXJSwitchStatementsAccess() {
		return gaJbase.getXJSwitchStatementsAccess();
	}
	
	public ParserRule getXJSwitchStatementsRule() {
		return getXJSwitchStatementsAccess().getRule();
	}
	
	///**
	// * Java 7 try-with-resources
	// */ XJTryWithResourcesStatement XExpression:
	//	=> ({XJTryWithResourcesStatement} 'try' openParenthesis?='(')
	//	resourceDeclarations+=XJTryWithResourcesVariableDeclaration* ')' expression=XBlockExpression
	//	catchClauses+=XCatchClause* ('finally' finallyExpression=XBlockExpression)?;
	public JbaseGrammarAccess.XJTryWithResourcesStatementElements getXJTryWithResourcesStatementAccess() {
		return gaJbase.getXJTryWithResourcesStatementAccess();
	}
	
	public ParserRule getXJTryWithResourcesStatementRule() {
		return getXJTryWithResourcesStatementAccess().getRule();
	}
	
	///*
	// * The final ; is optional in the last variable declaration in a
	// * try-with-resources
	// */
	//XJTryWithResourcesVariableDeclaration:
	//	{XJTryWithResourcesVariableDeclaration} final?='final'? type=JvmTypeReference name=ValidID '=' right=XExpression
	//	semicolon=';'?;
	public JbaseGrammarAccess.XJTryWithResourcesVariableDeclarationElements getXJTryWithResourcesVariableDeclarationAccess() {
		return gaJbase.getXJTryWithResourcesVariableDeclarationAccess();
	}
	
	public ParserRule getXJTryWithResourcesVariableDeclarationRule() {
		return getXJTryWithResourcesVariableDeclarationAccess().getRule();
	}
	
	//@ Override XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XBlockExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XBlockExpression)? | 'finally' finallyExpression=XBlockExpression);
	public JbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaJbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//@ Override XCatchClause:
	//	{XCatchClause} => 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XBlockExpression;
	public JbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaJbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@ Override XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XBlockExpression;
	public JbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaJbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//@ Override XPrimaryExpression XExpression:
	//	XJArrayConstructorCall | XConstructorCall | XJFeatureCallWithArrayAccess | XLiteral | XParenthesizedExpression;
	public JbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaJbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//@ Override XLiteral XExpression:
	//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XCharLiteral | XStringLiteral | XJArrayLiteral //	XTypeLiteral
	//;
	public JbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaJbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//// it is a subclass of XListLiteral, so that we will reuse
	// // type computation and compiler from Xbase
	// XJArrayLiteral:
	//	{XJArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public JbaseGrammarAccess.XJArrayLiteralElements getXJArrayLiteralAccess() {
		return gaJbase.getXJArrayLiteralAccess();
	}
	
	public ParserRule getXJArrayLiteralRule() {
		return getXJArrayLiteralAccess().getRule();
	}
	
	///*
	// * We want to tell between string and char literals since we'll treat them
	// * differently from the type computation point of view.
	// */
	//XCharLiteral XExpression:
	//	{XJCharLiteral} value=CHARACTER;
	public JbaseGrammarAccess.XCharLiteralElements getXCharLiteralAccess() {
		return gaJbase.getXCharLiteralAccess();
	}
	
	public ParserRule getXCharLiteralRule() {
		return getXCharLiteralAccess().getRule();
	}
	
	//@ Override XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public JbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaJbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'?;
	public TerminalRule getSTRINGRule() {
		return gaJbase.getSTRINGRule();
	}
	
	//terminal CHARACTER:
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getCHARACTERRule() {
		return gaJbase.getCHARACTERRule();
	}
	
	//@ Override OpEquality:
	//	'==' | '!=';
	public JbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaJbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//@ Override OpMulti:
	//	'*' | '/' | '%';
	public JbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaJbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//@ Override OpOther:
	//	'>' (=> ('>' '>') | '>') | '<<';
	public JbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaJbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//@ Override XAndExpression XExpression:
	//	XBitwiseInclusiveOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*;
	public JbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaJbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//XBitwiseInclusiveOrExpression XExpression:
	//	XBitwiseExclusiveOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*;
	public JbaseGrammarAccess.XBitwiseInclusiveOrExpressionElements getXBitwiseInclusiveOrExpressionAccess() {
		return gaJbase.getXBitwiseInclusiveOrExpressionAccess();
	}
	
	public ParserRule getXBitwiseInclusiveOrExpressionRule() {
		return getXBitwiseInclusiveOrExpressionAccess().getRule();
	}
	
	//OpInclusiveOr:
	//	'|';
	public JbaseGrammarAccess.OpInclusiveOrElements getOpInclusiveOrAccess() {
		return gaJbase.getOpInclusiveOrAccess();
	}
	
	public ParserRule getOpInclusiveOrRule() {
		return getOpInclusiveOrAccess().getRule();
	}
	
	//XBitwiseExclusiveOrExpression XExpression:
	//	XBitwiseAndExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*;
	public JbaseGrammarAccess.XBitwiseExclusiveOrExpressionElements getXBitwiseExclusiveOrExpressionAccess() {
		return gaJbase.getXBitwiseExclusiveOrExpressionAccess();
	}
	
	public ParserRule getXBitwiseExclusiveOrExpressionRule() {
		return getXBitwiseExclusiveOrExpressionAccess().getRule();
	}
	
	//OpExclusiveOr:
	//	'^';
	public JbaseGrammarAccess.OpExclusiveOrElements getOpExclusiveOrAccess() {
		return gaJbase.getOpExclusiveOrAccess();
	}
	
	public ParserRule getOpExclusiveOrRule() {
		return getOpExclusiveOrAccess().getRule();
	}
	
	//XBitwiseAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd])
	//	rightOperand=XEqualityExpression)*;
	public JbaseGrammarAccess.XBitwiseAndExpressionElements getXBitwiseAndExpressionAccess() {
		return gaJbase.getXBitwiseAndExpressionAccess();
	}
	
	public ParserRule getXBitwiseAndExpressionRule() {
		return getXBitwiseAndExpressionAccess().getRule();
	}
	
	//OpBitwiseAnd:
	//	'&';
	public JbaseGrammarAccess.OpBitwiseAndElements getOpBitwiseAndAccess() {
		return gaJbase.getOpBitwiseAndAccess();
	}
	
	public ParserRule getOpBitwiseAndRule() {
		return getOpBitwiseAndAccess().getRule();
	}
	
	//@ Override OpUnary:
	//	"!" | "-" | "+" | "~";
	public JbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaJbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//@ Override XAnnotationElementValueOrCommaList XExpression:
	//	=> ({XJArrayLiteral} '{') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? '}' |
	//	XAnnotationOrExpression // in Java multiple values must be specified with an array literal
	//
	//	// ({XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression )+)?
	//;
	public JbaseGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaJbase.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//@ Override XAnnotationElementValue XExpression:
	//	=> ({XJArrayLiteral} '{') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? '}' |
	//	XAnnotationOrExpression;
	public JbaseGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaJbase.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=super::XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=super::XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression:
	//	super::XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	super::XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=super::XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|super::OpEquality]) rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=super::JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|super::OpOther]) rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|super::OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|super::OpUnary] operand=XUnaryOperation |
	//	super::XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	super::XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=super::JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=super::JvmTypeReference (',' paramTypes+=super::JvmTypeReference)*)? ')')? '=>'
	//	returnType=super::JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	super::JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=super::JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=super::JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=super::JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=super::JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=super::XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.12.0
 */
package co.edu.icesi.eketal.serializer;

import co.edu.icesi.eketal.eketal.AndEvent;
import co.edu.icesi.eketal.eketal.Automaton;
import co.edu.icesi.eketal.eketal.Body;
import co.edu.icesi.eketal.eketal.EketalPackage;
import co.edu.icesi.eketal.eketal.EvDecl;
import co.edu.icesi.eketal.eketal.EventClass;
import co.edu.icesi.eketal.eketal.EventExpression;
import co.edu.icesi.eketal.eketal.Group;
import co.edu.icesi.eketal.eketal.Host;
import co.edu.icesi.eketal.eketal.JVMTYPE;
import co.edu.icesi.eketal.eketal.JVarD;
import co.edu.icesi.eketal.eketal.KindAttribute;
import co.edu.icesi.eketal.eketal.Ltl;
import co.edu.icesi.eketal.eketal.LtlAnd;
import co.edu.icesi.eketal.eketal.LtlExpression;
import co.edu.icesi.eketal.eketal.LtlOr;
import co.edu.icesi.eketal.eketal.LtlThen;
import co.edu.icesi.eketal.eketal.LtlUntil;
import co.edu.icesi.eketal.eketal.MSig;
import co.edu.icesi.eketal.eketal.Model;
import co.edu.icesi.eketal.eketal.OrEvent;
import co.edu.icesi.eketal.eketal.Rc;
import co.edu.icesi.eketal.eketal.Step;
import co.edu.icesi.eketal.eketal.TransDef;
import co.edu.icesi.eketal.eketal.Trigger;
import co.edu.icesi.eketal.eketal.UnaryEvent;
import co.edu.icesi.eketal.eketal.UnaryLtl;
import co.edu.icesi.eketal.services.EketalGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import jbase.jbase.JbasePackage;
import jbase.jbase.XJAdditionalXVariableDeclaration;
import jbase.jbase.XJArrayAccessExpression;
import jbase.jbase.XJArrayConstructorCall;
import jbase.jbase.XJArrayDimension;
import jbase.jbase.XJArrayLiteral;
import jbase.jbase.XJAssignment;
import jbase.jbase.XJBreakStatement;
import jbase.jbase.XJCharLiteral;
import jbase.jbase.XJClassObject;
import jbase.jbase.XJConditionalExpression;
import jbase.jbase.XJConstructorCall;
import jbase.jbase.XJContinueStatement;
import jbase.jbase.XJJvmFormalParameter;
import jbase.jbase.XJPrefixOperation;
import jbase.jbase.XJSemicolonStatement;
import jbase.jbase.XJSwitchStatements;
import jbase.jbase.XJTryWithResourcesStatement;
import jbase.jbase.XJTryWithResourcesVariableDeclaration;
import jbase.jbase.XJVariableDeclaration;
import jbase.serializer.JbaseSemanticSequencer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class EketalSemanticSequencer extends JbaseSemanticSequencer {

	@Inject
	private EketalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EketalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EketalPackage.AND_EVENT:
				sequence_AndEvent(context, (AndEvent) semanticObject); 
				return; 
			case EketalPackage.AUTOMATON:
				sequence_Automaton(context, (Automaton) semanticObject); 
				return; 
			case EketalPackage.BODY:
				sequence_Body(context, (Body) semanticObject); 
				return; 
			case EketalPackage.EV_DECL:
				sequence_EvDecl(context, (EvDecl) semanticObject); 
				return; 
			case EketalPackage.EVENT_CLASS:
				sequence_EventClass(context, (EventClass) semanticObject); 
				return; 
			case EketalPackage.EVENT_EXPRESSION:
				sequence_AtomEvent(context, (EventExpression) semanticObject); 
				return; 
			case EketalPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case EketalPackage.HOST:
				sequence_Host(context, (Host) semanticObject); 
				return; 
			case EketalPackage.JVMTYPE:
				sequence_TypeReturn(context, (JVMTYPE) semanticObject); 
				return; 
			case EketalPackage.JVAR_D:
				sequence_JVarD(context, (JVarD) semanticObject); 
				return; 
			case EketalPackage.KIND_ATTRIBUTE:
				sequence_KindAttribute(context, (KindAttribute) semanticObject); 
				return; 
			case EketalPackage.LTL:
				sequence_Ltl(context, (Ltl) semanticObject); 
				return; 
			case EketalPackage.LTL_AND:
				sequence_LtlAnd(context, (LtlAnd) semanticObject); 
				return; 
			case EketalPackage.LTL_EXPRESSION:
				sequence_LtlAtom(context, (LtlExpression) semanticObject); 
				return; 
			case EketalPackage.LTL_OR:
				sequence_LtlOr(context, (LtlOr) semanticObject); 
				return; 
			case EketalPackage.LTL_THEN:
				sequence_LtlThen(context, (LtlThen) semanticObject); 
				return; 
			case EketalPackage.LTL_UNTIL:
				sequence_LtlUntil(context, (LtlUntil) semanticObject); 
				return; 
			case EketalPackage.MSIG:
				sequence_MSig(context, (MSig) semanticObject); 
				return; 
			case EketalPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case EketalPackage.OR_EVENT:
				sequence_OrEvent(context, (OrEvent) semanticObject); 
				return; 
			case EketalPackage.RC:
				sequence_Rc(context, (Rc) semanticObject); 
				return; 
			case EketalPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case EketalPackage.TRANS_DEF:
				sequence_TransDef(context, (TransDef) semanticObject); 
				return; 
			case EketalPackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			case EketalPackage.UNARY_EVENT:
				sequence_UnaryExpresion(context, (UnaryEvent) semanticObject); 
				return; 
			case EketalPackage.UNARY_LTL:
				if (rule == grammarAccess.getLtlThenRule()
						|| action == grammarAccess.getLtlThenAccess().getLtlThenLeftAction_1_0()
						|| rule == grammarAccess.getLtlOrRule()
						|| action == grammarAccess.getLtlOrAccess().getLtlOrLeftAction_1_0()
						|| rule == grammarAccess.getLtlAndRule()
						|| action == grammarAccess.getLtlAndAccess().getLtlAndLeftAction_1_0()
						|| rule == grammarAccess.getLtlUntilRule()
						|| action == grammarAccess.getLtlUntilAccess().getLtlUntilLeftAction_1_0()
						|| rule == grammarAccess.getLtlUnaryRule()
						|| rule == grammarAccess.getLtlAtomRule()) {
					sequence_LtlAlways_LtlEventually_LtlNext_LtlNot(context, (UnaryLtl) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLtlAlwaysRule()) {
					sequence_LtlAlways(context, (UnaryLtl) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLtlEventuallyRule()) {
					sequence_LtlEventually(context, (UnaryLtl) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLtlNextRule()) {
					sequence_LtlNext(context, (UnaryLtl) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLtlNotRule()) {
					sequence_LtlNot(context, (UnaryLtl) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == JbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JbasePackage.XJ_ADDITIONAL_XVARIABLE_DECLARATION:
				sequence_XJAdditionalXVariableDeclaration(context, (XJAdditionalXVariableDeclaration) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_ACCESS_EXPRESSION:
				if (rule == grammarAccess.getXJFeatureCallWithArrayAccessRule()) {
					sequence_XJFeatureCallWithArrayAccess(context, (XJArrayAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXJConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getXJArrayAccessExpressionArrayAction_1_1_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXJClassObjectTypeExpressionAction_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XJFeatureCallWithArrayAccess_XPostfixOperation(context, (XJArrayAccessExpression) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_ARRAY_CONSTRUCTOR_CALL:
				sequence_XJArrayConstructorCall(context, (XJArrayConstructorCall) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_DIMENSION:
				sequence_XJArrayDimension(context, (XJArrayDimension) semanticObject); 
				return; 
			case JbasePackage.XJ_ARRAY_LITERAL:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()) {
					sequence_XAnnotationElementValueOrCommaList_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAnnotationElementValueRule()) {
					sequence_XAnnotationElementValue_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXJConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getXJArrayAccessExpressionArrayAction_1_1_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXJClassObjectTypeExpressionAction_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXJArrayLiteralRule()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XJArrayLiteral(context, (XJArrayLiteral) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_ASSIGNMENT:
				sequence_XAssignment(context, (XJAssignment) semanticObject); 
				return; 
			case JbasePackage.XJ_BREAK_STATEMENT:
				sequence_XJBranchingStatement(context, (XJBreakStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_CHAR_LITERAL:
				sequence_XCharLiteral(context, (XJCharLiteral) semanticObject); 
				return; 
			case JbasePackage.XJ_CLASS_OBJECT:
				sequence_XMemberFeatureCall(context, (XJClassObject) semanticObject); 
				return; 
			case JbasePackage.XJ_CONDITIONAL_EXPRESSION:
				sequence_XAssignment(context, (XJConditionalExpression) semanticObject); 
				return; 
			case JbasePackage.XJ_CONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XJConstructorCall) semanticObject); 
				return; 
			case JbasePackage.XJ_CONTINUE_STATEMENT:
				sequence_XJBranchingStatement(context, (XJContinueStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_JVM_FORMAL_PARAMETER:
				sequence_FullJvmFormalParameter(context, (XJJvmFormalParameter) semanticObject); 
				return; 
			case JbasePackage.XJ_PREFIX_OPERATION:
				sequence_XPostfixOperation(context, (XJPrefixOperation) semanticObject); 
				return; 
			case JbasePackage.XJ_SEMICOLON_STATEMENT:
				if (rule == grammarAccess.getXJEmptyStatementRule()) {
					sequence_XJEmptyStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXJStatementOrBlockRule()
						|| rule == grammarAccess.getXJSingleStatementRule()) {
					sequence_XJEmptyStatement_XJSemicolonStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXJSemicolonStatementRule()) {
					sequence_XJSemicolonStatement(context, (XJSemicolonStatement) semanticObject); 
					return; 
				}
				else break;
			case JbasePackage.XJ_SWITCH_STATEMENTS:
				sequence_XJSwitchStatements(context, (XJSwitchStatements) semanticObject); 
				return; 
			case JbasePackage.XJ_TRY_WITH_RESOURCES_STATEMENT:
				sequence_XJTryWithResourcesStatement(context, (XJTryWithResourcesStatement) semanticObject); 
				return; 
			case JbasePackage.XJ_TRY_WITH_RESOURCES_VARIABLE_DECLARATION:
				sequence_XJTryWithResourcesVariableDeclaration(context, (XJTryWithResourcesVariableDeclaration) semanticObject); 
				return; 
			case JbasePackage.XJ_VARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XJVariableDeclaration) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XAnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XAnnotationsPackage.XANNOTATION:
				sequence_XAnnotation(context, (XAnnotation) semanticObject); 
				return; 
			case XAnnotationsPackage.XANNOTATION_ELEMENT_VALUE_PAIR:
				sequence_XAnnotationElementValuePair(context, (XAnnotationElementValuePair) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXJStatementOrBlockRule()
						|| rule == grammarAccess.getXBlockExpressionRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXClosureRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     OrEvent returns AndEvent
	 *     OrEvent.OrEvent_1_0 returns AndEvent
	 *     AndEvent returns AndEvent
	 *     AndEvent.AndEvent_1_0 returns AndEvent
	 *     NotEvent returns AndEvent
	 *     AtomEvent returns AndEvent
	 *
	 * Constraint:
	 *     (left=AndEvent_AndEvent_1_0 op='&&' right=NotEvent)
	 */
	protected void sequence_AndEvent(ISerializationContext context, AndEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.AND_EVENT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.AND_EVENT__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.AND_EVENT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.AND_EVENT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndEventAccess().getAndEventLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndEventAccess().getOpAmpersandAmpersandKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getAndEventAccess().getRightNotEventParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OrEvent returns EventExpression
	 *     OrEvent.OrEvent_1_0 returns EventExpression
	 *     AndEvent returns EventExpression
	 *     AndEvent.AndEvent_1_0 returns EventExpression
	 *     NotEvent returns EventExpression
	 *     AtomEvent returns EventExpression
	 *
	 * Constraint:
	 *     tipoEvento=EventPredicate
	 */
	protected void sequence_AtomEvent(ISerializationContext context, EventExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__TIPO_EVENTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__TIPO_EVENTO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomEventAccess().getTipoEventoEventPredicateParserRuleCall_0_0(), semanticObject.getTipoEvento());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Automaton
	 *     Automaton returns Automaton
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? steps+=Step*)
	 */
	protected void sequence_Automaton(ISerializationContext context, Automaton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Body returns Body
	 *
	 * Constraint:
	 *     body=XBlockExpression
	 */
	protected void sequence_Body(ISerializationContext context, Body semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.BODY__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.BODY__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBodyAccess().getBodyXBlockExpressionParserRuleCall_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns EvDecl
	 *     EvDecl returns EvDecl
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? eventos+=OrEvent*)
	 */
	protected void sequence_EvDecl(ISerializationContext context, EvDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventClass returns EventClass
	 *
	 * Constraint:
	 *     (name=ID protocol=Protocol? interface=STRING? declarations+=Decl*)
	 */
	protected void sequence_EventClass(ISerializationContext context, EventClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (name=ID hosts+=Host*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Host returns Host
	 *
	 * Constraint:
	 *     (ip=Ip | groupId=[Group|ID])
	 */
	protected void sequence_Host(ISerializationContext context, Host semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns JVarD
	 *     JVarD returns JVarD
	 *
	 * Constraint:
	 *     (name=ValidID type=JvmTypeReference)
	 */
	protected void sequence_JVarD(ISerializationContext context, JVarD semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.JVAR_D__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.JVAR_D__NAME));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.JVAR_D__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.JVAR_D__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJVarDAccess().getNameValidIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJVarDAccess().getTypeJvmTypeReferenceParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventPredicate returns KindAttribute
	 *     KindAttribute returns KindAttribute
	 *
	 * Constraint:
	 *     (hostgroup=[Group|ID] | ongroup=[Group|ID] | condition=XParenthesizedExpression)
	 */
	protected void sequence_KindAttribute(ISerializationContext context, KindAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns UnaryLtl
	 *     LtlThen.LtlThen_1_0 returns UnaryLtl
	 *     LtlOr returns UnaryLtl
	 *     LtlOr.LtlOr_1_0 returns UnaryLtl
	 *     LtlAnd returns UnaryLtl
	 *     LtlAnd.LtlAnd_1_0 returns UnaryLtl
	 *     LtlUntil returns UnaryLtl
	 *     LtlUntil.LtlUntil_1_0 returns UnaryLtl
	 *     LtlUnary returns UnaryLtl
	 *     LtlAtom returns UnaryLtl
	 *
	 * Constraint:
	 *     ((op='next' expr=LtlAtom) | (op='always' expr=LtlAtom) | (op='eventually' expr=LtlAtom) | (op='!' expr=LtlAtom))
	 */
	protected void sequence_LtlAlways_LtlEventually_LtlNext_LtlNot(ISerializationContext context, UnaryLtl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LtlAlways returns UnaryLtl
	 *
	 * Constraint:
	 *     (op='always' expr=LtlAtom)
	 */
	protected void sequence_LtlAlways(ISerializationContext context, UnaryLtl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlAlwaysAccess().getOpAlwaysKeyword_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlAlwaysAccess().getExprLtlAtomParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns LtlAnd
	 *     LtlThen.LtlThen_1_0 returns LtlAnd
	 *     LtlOr returns LtlAnd
	 *     LtlOr.LtlOr_1_0 returns LtlAnd
	 *     LtlAnd returns LtlAnd
	 *     LtlAnd.LtlAnd_1_0 returns LtlAnd
	 *     LtlUntil returns LtlAnd
	 *     LtlUntil.LtlUntil_1_0 returns LtlAnd
	 *     LtlUnary returns LtlAnd
	 *     LtlAtom returns LtlAnd
	 *
	 * Constraint:
	 *     (left=LtlAnd_LtlAnd_1_0 op='&&' right=LtlUntil)
	 */
	protected void sequence_LtlAnd(ISerializationContext context, LtlAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlAndAccess().getLtlAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLtlAndAccess().getOpAmpersandAmpersandKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlAndAccess().getRightLtlUntilParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns LtlExpression
	 *     LtlThen.LtlThen_1_0 returns LtlExpression
	 *     LtlOr returns LtlExpression
	 *     LtlOr.LtlOr_1_0 returns LtlExpression
	 *     LtlAnd returns LtlExpression
	 *     LtlAnd.LtlAnd_1_0 returns LtlExpression
	 *     LtlUntil returns LtlExpression
	 *     LtlUntil.LtlUntil_1_0 returns LtlExpression
	 *     LtlUnary returns LtlExpression
	 *     LtlAtom returns LtlExpression
	 *
	 * Constraint:
	 *     event=[EvDecl|ID]
	 */
	protected void sequence_LtlAtom(ISerializationContext context, LtlExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__EVENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlAtomAccess().getEventEvDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EketalPackage.Literals.LTL_EXPRESSION__EVENT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlEventually returns UnaryLtl
	 *
	 * Constraint:
	 *     (op='eventually' expr=LtlAtom)
	 */
	protected void sequence_LtlEventually(ISerializationContext context, UnaryLtl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlEventuallyAccess().getOpEventuallyKeyword_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlEventuallyAccess().getExprLtlAtomParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlNext returns UnaryLtl
	 *
	 * Constraint:
	 *     (op='next' expr=LtlAtom)
	 */
	protected void sequence_LtlNext(ISerializationContext context, UnaryLtl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlNextAccess().getOpNextKeyword_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlNextAccess().getExprLtlAtomParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlNot returns UnaryLtl
	 *
	 * Constraint:
	 *     (op='!' expr=LtlAtom)
	 */
	protected void sequence_LtlNot(ISerializationContext context, UnaryLtl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.UNARY_LTL__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlNotAccess().getOpExclamationMarkKeyword_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlNotAccess().getExprLtlAtomParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns LtlOr
	 *     LtlThen.LtlThen_1_0 returns LtlOr
	 *     LtlOr returns LtlOr
	 *     LtlOr.LtlOr_1_0 returns LtlOr
	 *     LtlAnd returns LtlOr
	 *     LtlAnd.LtlAnd_1_0 returns LtlOr
	 *     LtlUntil returns LtlOr
	 *     LtlUntil.LtlUntil_1_0 returns LtlOr
	 *     LtlUnary returns LtlOr
	 *     LtlAtom returns LtlOr
	 *
	 * Constraint:
	 *     (left=LtlOr_LtlOr_1_0 op='||' right=LtlAnd)
	 */
	protected void sequence_LtlOr(ISerializationContext context, LtlOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlOrAccess().getLtlOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLtlOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlOrAccess().getRightLtlAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns LtlThen
	 *     LtlThen.LtlThen_1_0 returns LtlThen
	 *     LtlOr returns LtlThen
	 *     LtlOr.LtlOr_1_0 returns LtlThen
	 *     LtlAnd returns LtlThen
	 *     LtlAnd.LtlAnd_1_0 returns LtlThen
	 *     LtlUntil returns LtlThen
	 *     LtlUntil.LtlUntil_1_0 returns LtlThen
	 *     LtlUnary returns LtlThen
	 *     LtlAtom returns LtlThen
	 *
	 * Constraint:
	 *     (left=LtlThen_LtlThen_1_0 op='->' right=LtlOr)
	 */
	protected void sequence_LtlThen(ISerializationContext context, LtlThen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_THEN__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_THEN__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_THEN__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_THEN__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlThenAccess().getLtlThenLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLtlThenAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlThenAccess().getRightLtlOrParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LtlThen returns LtlUntil
	 *     LtlThen.LtlThen_1_0 returns LtlUntil
	 *     LtlOr returns LtlUntil
	 *     LtlOr.LtlOr_1_0 returns LtlUntil
	 *     LtlAnd returns LtlUntil
	 *     LtlAnd.LtlAnd_1_0 returns LtlUntil
	 *     LtlUntil returns LtlUntil
	 *     LtlUntil.LtlUntil_1_0 returns LtlUntil
	 *     LtlUnary returns LtlUntil
	 *     LtlAtom returns LtlUntil
	 *
	 * Constraint:
	 *     (left=LtlUntil_LtlUntil_1_0 op='until' right=LtlUnary)
	 */
	protected void sequence_LtlUntil(ISerializationContext context, LtlUntil semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_UNTIL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_UNTIL__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.LTL_UNTIL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.LTL_UNTIL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLtlUntilAccess().getLtlUntilLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getLtlUntilAccess().getOpUntilKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getLtlUntilAccess().getRightLtlUnaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Ltl
	 *     Ltl returns Ltl
	 *
	 * Constraint:
	 *     (name=ID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? predicate=LtlThen)
	 */
	protected void sequence_Ltl(ISerializationContext context, Ltl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns MSig
	 *     MSig returns MSig
	 *
	 * Constraint:
	 *     (name=ValidID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? type=JvmTypeReference? body=XBlockExpression)
	 */
	protected void sequence_MSig(ISerializationContext context, MSig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (name=QualifiedName? importSection=XImportSection typeDeclaration=EventClass) | 
	 *         (name=QualifiedName? typeDeclaration=EventClass) | 
	 *         typeDeclaration=EventClass
	 *     )?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrEvent returns OrEvent
	 *     OrEvent.OrEvent_1_0 returns OrEvent
	 *     AndEvent returns OrEvent
	 *     AndEvent.AndEvent_1_0 returns OrEvent
	 *     NotEvent returns OrEvent
	 *     AtomEvent returns OrEvent
	 *
	 * Constraint:
	 *     (left=OrEvent_OrEvent_1_0 op='||' right=AndEvent)
	 */
	protected void sequence_OrEvent(ISerializationContext context, OrEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.OR_EVENT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.OR_EVENT__LEFT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.OR_EVENT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.OR_EVENT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrEventAccess().getOrEventLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrEventAccess().getOpVerticalLineVerticalLineKeyword_1_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getOrEventAccess().getRightAndEventParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Rc
	 *     Rc returns Rc
	 *
	 * Constraint:
	 *     (syncex='syncex'? pos=Pos automaton=[Automaton|ID] state=[Step|ID] body=Body)
	 */
	protected void sequence_Rc(ISerializationContext context, Rc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (type=StateType? name=ID (transitions+=TransDef transitions+=TransDef*)?)
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransDef returns TransDef
	 *
	 * Constraint:
	 *     (event=[EvDecl|ID] target=[Step|ID])
	 */
	protected void sequence_TransDef(ISerializationContext context, TransDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.TRANS_DEF__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.TRANS_DEF__EVENT));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.TRANS_DEF__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.TRANS_DEF__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransDefAccess().getEventEvDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EketalPackage.Literals.TRANS_DEF__EVENT, false));
		feeder.accept(grammarAccess.getTransDefAccess().getTargetStepIDTerminalRuleCall_2_0_1(), semanticObject.eGet(EketalPackage.Literals.TRANS_DEF__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventPredicate returns Trigger
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     (triggerType=TPrefix returndef=TypeReturn? esig=QualifiedName (params+=JvmTypeReference params+=JvmTypeReference*)?)
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeReturn returns JVMTYPE
	 *
	 * Constraint:
	 *     (astk=ANY | jvmRef=JvmTypeReference)
	 */
	protected void sequence_TypeReturn(ISerializationContext context, JVMTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrEvent returns UnaryEvent
	 *     OrEvent.OrEvent_1_0 returns UnaryEvent
	 *     AndEvent returns UnaryEvent
	 *     AndEvent.AndEvent_1_0 returns UnaryEvent
	 *     NotEvent returns UnaryEvent
	 *     UnaryExpresion returns UnaryEvent
	 *     AtomEvent returns UnaryEvent
	 *
	 * Constraint:
	 *     (op='!' expr=AtomEvent)
	 */
	protected void sequence_UnaryExpresion(ISerializationContext context, UnaryEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.EVENT_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, EketalPackage.Literals.UNARY_EVENT__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EketalPackage.Literals.UNARY_EVENT__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryExpresionAccess().getOpExclamationMarkKeyword_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getUnaryExpresionAccess().getExprAtomEventParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
}
